<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇blog</title>
    <url>/2022/03/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/</url>
    <content><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>搞了两三天了，还没搞好，昨天搞好了，换了个主题yilia结果头像图片显示不出来，搜索了很多解决方案，结果还是不行，有点烦了，全删了重新装了hexo。<br>烦人。</p>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>原来要在#符号后面加空格才能显示小标题字体！文章总算可以显示小标题了。</p>
<h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>下一步学习在文章中放图片</p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片还是显示不出来啊！烦了！</p>
<p><img src="https://upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp" alt="我用markdown插入的第一张图片"></p>
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>用Typora工具快速编写MarkDown格式的文章</title>
    <url>/2022/03/04/%E7%94%A8Typora%E5%B7%A5%E5%85%B7%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99MarkDown%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="Typora简介"><a href="#Typora简介" class="headerlink" title="Typora简介"></a>Typora简介</h1><p>“<em>Typora是一款跨平台的Markdown编辑器软件</em>，拥有Windows、macOS客户端。Typora支持MarkDown的标准语法，同时这款软件还支持动态预览功能，一键预览。”</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E7%95%8C%E9%9D%A2.png" alt="Typora界面"></p>
<p><strong>优点：界面简洁，编写所需功能应有尽有，可以打开左侧窗口管理当前文件夹的文档、查看当前文档大纲，功能很实用，编写MarkDown文档的利器！语法敲完即刻渲染完成，并显示预览效果。集成了Word和MarkDown的优点，使用体验很棒！</strong></p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>这篇文章介绍使用Typora基于MarkDown语法写文章！</p>
<span id="more"></span>

<p><strong>一到五和上篇文章没什么区别，可以直接跳过</strong></p>
<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示<br> 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr>
<h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li>
</ul>
<p>要加粗的文字左右分别用两个*号包起来</p>
<ul>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li>
</ul>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<ul>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li>
</ul>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<ul>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li>
</ul>
<p>要加删除线的文字左右分别用两个~~号包起来</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><strong>这是加粗的文字</strong><br> <em>这是倾斜的文字</em><br> <em><strong>这是斜体加粗的文字</strong></em><br> <del>这是加删除线的文字</del></p>
<hr>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，字体会逐级放大。</p>
<p>引用在GitHub上不好使。</p>
<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p> 这是引用的内容</p>
</blockquote>
<blockquote>
<blockquote>
<p>引用的内容</p>
</blockquote>
</blockquote>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p>效果如下：<br> 可以看到，显示效果是一样的。</p>
<hr>
<hr>
<hr>
<hr>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 <span class="string">&quot;图片title&quot;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">![blockchain](https:<span class="comment">//ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span></span><br><span class="line">u=<span class="number">702257389</span>,<span class="number">1274025419</span>&amp;fm=<span class="number">27</span>&amp;gp=<span class="number">0.</span>jpg <span class="string">&quot;区块链&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/webp.png" alt="网图"></p>
<p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p>
<p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用<strong>图床</strong>，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p>
<h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">&quot;title&quot;</span>)</span><br><span class="line">title可加可不加，加了鼠标进过时会显示title的内容</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[简书](http:<span class="comment">//jianshu.com)</span></span><br><span class="line">[百度](http:<span class="comment">//baidu.com)</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b">简书</a><br><a href="https://links.jianshu.com/go?to=http://baidu.com">百度</a></p>
<hr>
<h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：<br> 无序列表用 - + * 任何一种都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：<br> 数字加点加<strong>空格</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级完成后回车自动生成同级，按下backspace键后输入再次输入列表格式（- + * 或数字加空格）就行</strong></p>
<p><strong>或者直接续上一级的列表格式然后按tab键自动调整缩进到下一级</strong></p>
<ul>
<li>一级无序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级无序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ul>
<ol>
<li>一级有序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级有序列表内容<ol>
<li>二级有序列表内容<ol>
<li>三级有序内容</li>
<li>三级有序内容</li>
</ol>
</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ol>
<hr>
<h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">输入表头后回车</span><br><span class="line"><span class="params">|表头|</span>表头<span class="params">|表头|</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="params">|姓名|</span>技能<span class="params">|排行|</span></span><br><span class="line">    enter键</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>技能</th>
<th>排行</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>然后输入内容即可。现在版本这里跟word一样处理，很方便了！</p>
<h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br> 单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`代码内容`</span></span><br></pre></td></tr></table></figure>

<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">(<span class="string">``</span><span class="string">`)</span></span><br><span class="line"><span class="string">enter键</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
</blockquote>
<p>示例：</p>
<p>单行代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`create database hero;`</span></span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">         echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>单行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database hero;</span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">  echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">```flow   </span><br><span class="line">    enter键</span><br></pre></td></tr></table></figure>

<p>就会显示这样的空模板<img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E7%A9%BA%E6%A8%A1%E6%9D%BF.png" alt="流程图空模板"></p>
<p>然后输入代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">    </span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">cond(yes)-&gt;e   </span><br></pre></td></tr></table></figure>

<blockquote>
<p>先是用&#x3D;&gt;定义start、operation、condition、end的代号分别对应不同的框样式；然后用-&gt;定义路径。</p>
</blockquote>
<p>效果如下：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%95%88%E6%9E%9C.png" alt="Typora流程图效果"></p>
<h1 id="十一、时序图"><a href="#十一、时序图" class="headerlink" title="十一、时序图"></a>十一、时序图</h1><p><strong>复现微信支付的时序图</strong></p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">    ……时序图代码……</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    小程序 -&gt;&gt; 小程序 : wx.login()获取code</span><br><span class="line">    小程序 -&gt;&gt; + 服务器 : wx.request()发送code</span><br><span class="line">    服务器 -&gt;&gt; + 微信服务器 : code+appid+secret</span><br><span class="line">    微信服务器 --&gt;&gt; - 服务器 : openid</span><br><span class="line">    服务器 -&gt;&gt; 服务器 : 根据openid确定用户并生成token</span><br><span class="line">    服务器 --&gt;&gt; - 小程序 : token</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E5%BE%AE%E4%BF%A1%E6%97%B6%E5%BA%8F%E5%9B%BE.png"></p>
<p>再演示一个微信支付的流程图</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    title: 微信支付时序图</span><br><span class="line">    participant 微信支付用户 as user</span><br><span class="line">    participant 微信客户端 as wxc</span><br><span class="line">    participant 商户APP客户端 as appc</span><br><span class="line">    participant 商户后台系统 as apps</span><br><span class="line">    participant 微信支付系统 as wxs</span><br><span class="line"></span><br><span class="line">    user-&gt;appc:1.打开商户APP客户端()</span><br><span class="line">    appc-&gt;appc:2.选择商品下单()</span><br><span class="line">    appc-&gt;apps:3.请求生成支付订单()</span><br><span class="line">    apps-&gt;wxs:4.调用统一下单API()</span><br><span class="line">    wxs-&gt;wxs:生成预付单()</span><br><span class="line">    wxs--&gt;&gt;apps:5.返回预付单信息(prepay_id)</span><br><span class="line">    apps-&gt;apps:6.生成带签名的客户端支付信息()</span><br><span class="line">    apps--&gt;&gt;appc:7:返回信息(prepay_id,sign等)</span><br><span class="line">    user-&gt;appc:8:用户确认支付()</span><br><span class="line">    appc--&gt;wxc:9:支付参数通过调用SDK调起微信支付()</span><br><span class="line">    wxc-&gt;wxs:10.发起支付请求()</span><br><span class="line">    wxs-&gt;wxs:验证支付参数, APP支付权限等()</span><br><span class="line">    wxs--&gt;&gt;wxc:11.返回需要支付授权()</span><br><span class="line">    user-&gt;wxc:12.用户确认支付, 输入密码()</span><br><span class="line">    wxc-&gt;wxs:13:提交支付授权()</span><br><span class="line">    wxs-&gt;wxs:验证授权, 完成支付交易()</span><br><span class="line">    wxs--&gt;&gt;apps:15.异步通知商户支付结果()</span><br><span class="line">    apps-&gt;apps:接收和保存支付通知()</span><br><span class="line">    apps-&gt;&gt;wxs:16.返回告知已成功接收处理()</span><br><span class="line">    wxs--&gt;wxc:14.返回支付结果, 发送微信消息提示()</span><br><span class="line">    wxc-&gt;appc:将支付状态通过商户APP已实现的回调接口执行回调()</span><br><span class="line">    appc-&gt;apps:后台查询实际支付结果()</span><br><span class="line">    apps-&gt;wxs:调用微信查询API查询支付结果()</span><br><span class="line">    wxs--&gt;&gt;apps:返回支付结果()</span><br><span class="line">    apps--&gt;appc:返回支付结果</span><br><span class="line">    appc--&gt;user:展示支付结果()</span><br><span class="line">    appc-&gt;appc:商户发货()</span><br></pre></td></tr></table></figure>



<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="微信支付时序图"></p>
<h1 id="十二、饼图"><a href="#十二、饼图" class="headerlink" title="十二、饼图"></a><strong>十二、饼图</strong></h1><p>饼图使用 <code>pie</code> 表示，标题下面分别是区域名称及其百分比。</p>
<p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">    饼图代码</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line">    title <span class="keyword">Key</span> elements <span class="keyword">in</span> Product X</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Calcium&quot;</span> : <span class="number">42.96</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Potassium&quot;</span> : <span class="number">50.05</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Magnesium&quot;</span> : <span class="number">10.01</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Iron&quot;</span> :  <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E9%A5%BC%E5%9B%BE.png"></p>
<p>参考链接1：<a href="https://www.jianshu.com/p/191d1e21f7ed">https://www.jianshu.com/p/191d1e21f7ed</a></p>
<p>参考链接2：<a href="https://www.jianshu.com/p/7fa30d7d6fd5">https://www.jianshu.com/p/7fa30d7d6fd5</a></p>
]]></content>
      <tags>
        <tag>MarkDown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+PicGo图床功能测试（&amp;教程）</title>
    <url>/2022/03/05/GitHub+PicGo%E5%9B%BE%E5%BA%8A%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%EF%BC%88&amp;%E6%95%99%E7%A8%8B%EF%BC%89/</url>
    <content><![CDATA[<h1>图床测试（&amp;教程）</h1>
<ul>
<li>
<p>图床一般是指储存图片的服务器，一般写作的同学需要把图片上传到图床。</p>
</li>
<li>
<p>图床有免费的付费的，自己的 GitHub 当然是免费的。</p>
</li>
<li>
<p>这篇文章介绍如何把自己的 GitHub 当作图床，使用开源软件 PicGo ，把图片上传到 GitHub。</p>
</li>
<li>
<p>当然了PicGo 除了可以把 GitHub 作为图床，还可以使用其他的图床。</p>
</li>
<li>
<p>我的操作系统是 windows 10，我们开始吧！</p>
</li>
</ul>
<span id="more"></span>
<h2 id="下载-PicGo">下载 PicGo</h2>
<p>官网免费下载：<a href="https://molunerfinn.com/PicGo/">PicGo (molunerfinn.com)</a></p>
<h2 id="创建存放图片的仓库">创建存放图片的仓库</h2>
<h2 id="获取token">获取token</h2>
<ol>
<li>如果从本地往仓库上传图片，需要有类似于 <strong>密钥</strong> 的东西🔑，也就是这一步获取的 <strong>token</strong>。</li>
<li>点击右上角的头像，选择 <strong>settings</strong></li>
<li>进入设置页面，点击左侧的 <strong>Developer Settings</strong></li>
<li>进入如下的页面，选择左侧的 <strong>Personal access tokens</strong></li>
<li>接着，点击右上角的 <strong>Generate new token</strong> 按钮</li>
<li>进入新建 token 的页面，按照图片的提示完成设置，然后点击最下面的 <strong>Generate token</strong> 按钮：</li>
<li>根据自己需求选择token的有效期，可以选择无限</li>
</ol>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E8%8E%B7%E5%8F%96token.png" alt=""></p>
<p>然后页面就会显示新生成的 <strong>token</strong>，是一串数字和字母的组合，复制下来，接下来要用。</p>
<h2 id="设置PicGo">设置PicGo</h2>
<p>打开 PicGo，点击左侧 <strong>图床设置</strong>，选择 <strong>GitHub 设置</strong>：</p>
<p>下面是我填写的示范：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设定仓库名：就是你的GitHub用户名/仓库名</span><br><span class="line">设定分支名：写 main就行</span><br><span class="line">设定 Token：把刚刚生成的 token 填上</span><br><span class="line">指定存储路径：写成 img/ ，以后的图片都会存在 img 文件夹下，也可以写成其他路径</span><br><span class="line">设定自定义域名：这是固定的格式，https://raw.githubusercontent.com/你的用户名/你的仓库名/main</span><br></pre></td></tr></table></figure>
<p>然后点击确定即可，若配置的信息正确，在屏幕右下角会弹出设置成功的通知。</p>
<p><strong>PicGo设置</strong></p>
<ul>
<li>
<p>勾选 上传前重命名，每次上传时会弹出窗口让你自定义图片名。默认是以时间作为图片名。</p>
</li>
<li>
<p>勾选 上传后自动赋值URL，这样上传完就可以直接去md文章中粘贴就可以插入图片了。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/PicGo%E8%AE%BE%E7%BD%AE.png" alt="PicGo设置"></p>
<h2 id="上传图片"><strong>上传图片</strong></h2>
<p>用PicGo上传图片到指定的GitHub图床仓库。或其他图床仓库。</p>
<p>上传成功后，右下角会弹出 <strong>上传成功</strong> 的提示</p>
<p>点击左边的相册，也会看到上传的图片，当然去 GitHub 仓库也能看到。点击复制，就能复制图片的 markdown 链接，完成👍</p>
<h2 id="文章插入图片"><strong>文章插入图片</strong></h2>
<p>用Typora编辑博客文章（MarkDown文件）</p>
<h2 id="设置Typora">设置Typora</h2>
<p><strong>在Typora设置中关闭插入图片时自动复制或上传的功能</strong></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95%E2%80%94Typora%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE.png" alt=""></p>
<h2 id="修改hexo配置文件-config">修改hexo配置文件_config</h2>
<p><strong>修改Hexo根目录—blog文件夹中的_config配置文件，关闭自动生成文章同名文件夹功能</strong></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95%E2%80%94blog_config%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95%E2%80%94%E5%9C%B0%E5%9D%80%E6%A0%BC%E5%BC%8F.png" alt="上一张图片地址"></p>
<p>成功啦！</p>
<p>从本地和远程端口访问效果如图：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95%E2%80%94%E8%BF%9C%E7%AB%AF%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F.png" alt="成功显示出来了！"></p>
<h1>总结</h1>
<p>利用PicGo和GitHub管理图片，将博客用到的图片存放于云端，而不占用自己的电脑内存空间。</p>
<ul>
<li>
<p>下载安装PicGo</p>
</li>
<li>
<p>创建GitHub图片仓库</p>
</li>
<li>
<p>配置GitHub</p>
</li>
<li>
<p>设置PicGo</p>
</li>
<li>
<p>给文章插入图片</p>
</li>
<li>
<p>设置Typora</p>
</li>
<li>
<p>修改hexo配置文件_config</p>
</li>
</ul>
<p>最后说一句， GitHub 图床虽然免费，但是上传有些慢，也可能因为网络的原因上传失败，需要多试几次~</p>
<h2 id="优点："><strong>优点：</strong></h2>
<ol>
<li>
<p>降低本地内存开销。通过图床仓库来管理的话图片就都保存在了GitHub云端上，可以节省本地空间了。在使用图床之前，我只发了几篇文章就占用了近100M的内存</p>
</li>
<li>
<p>简便很多。发博客很多都是用的截图，再也不用把截图保存到本地再插入到文章里了。</p>
</li>
</ol>
<h2 id="缺点："><strong>缺点：</strong></h2>
<ol>
<li>图床仓库是公开的，上传图片要注意保护个人隐私。</li>
</ol>
<h2 id="上传图片失败解决方法">上传图片失败解决方法</h2>
<p>目前知道的GitHub图床问题有：</p>
<ol>
<li>Token未更新</li>
<li>仓库名称带空格，配置时需要变为-</li>
<li>无法上传PNG</li>
<li>图片名称不能带+</li>
<li>仓库中已存在相同名称的图片，有时候上传了图片显示不出来，然后就习惯性把相册里的图删除，但其实在GitHub仓库里的文件并没有删除，所以再次上传时就会失败，原因是命名冲突
<ul>
<li>解决方法在PicGo设置中勾选  时间戳重命名</li>
<li>或者web进入GitHub图床仓库，然后删除重复命名的图片文件</li>
</ul>
</li>
</ol>
<p>参考文献：</p>
<p><a href="https://www.jianshu.com/p/9d91355e8418">图床工具的使用—PicGo - 简书 (jianshu.com)</a></p>
<p><a href="https://blog.csdn.net/weixin_38673554/article/details/106444215">(22条消息) GitHub + PicGo 搭建自己的图床_CatOneTwo的专栏-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>test</tag>
        <tag>PicGo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/02/Hello%20World/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>《微积分的力量》</title>
    <url>/2022/03/11/%E3%80%8A%E5%BE%AE%E7%A7%AF%E5%88%86%E7%9A%84%E5%8A%9B%E9%87%8F%E3%80%8B/</url>
    <content><![CDATA[<p>看到第27页，我感到这本书在用常人能听懂的方式讲述微积分的实际应用。不得不说这种讲述方式很讨喜，我有点喜欢上了。</p>
<p>同时令我想到了昨天在朋友桌上翻看的《费曼学习法》中所述，用输出逼迫自己高效输入，而输出的正确方式是将你所学到的知识用非专业的人能听懂的话来讲，如果是以想要炫耀自己学习深度的态度去输出比如用很多专业的术语，那样则没有效果。</p>
<p>确实，作为这种输出方式的接受者我感到获得了帮助，如果这般输出还能使输出者高效输入，则是互利共赢了，实在找不到不接受的理由。</p>
<p>还有一句不久前不知从哪看来的话，我觉得让我眼前一亮，分享在这里也不错：</p>
<p><strong>“如果我们学习这么多知识，却不能用来帮助他人，那学来何用呢？”</strong></p>
<span id="more"></span>
<hr>
<hr>
<hr>
<p><strong>无穷原则</strong></p>
<p>让复杂的问题简单化，微积分痴迷于简单性。</p>
<p>曲线、运动和变化是最大的难题。<strong>但在无穷远处，一切都变得更简单了</strong></p>
<p><strong>分而治之</strong>    运用到极致   就是说到了无穷的程度</p>
<p>微积分不是把一个大问题切分成有限的几小块，而是无休止地切分下去，直到这个问题被切分成无穷多个最微小并且可以想象的部分。之后它会逐一解决所有微小的问题，这些问题通常要比那个庞大的原始问题更容易解决。然后把所有微小问题的答案重新组合起来，这一步的难度会比较大，但也比原始问题简单得多。</p>
<p>微积分可分为两个步骤：<strong>切分和重组</strong>。如上所述，用数学术语来说，切分过程总是涉及无限精密的减法运算，用于量化各部分之间的差异，这个部分叫做微分学。重组过程则总是涉及无限的加法运算，将各个部分整合成原来的整体，这个部分叫做积分学。</p>
<p><strong>创造力是直觉的产物，而理性则珊珊来迟。</strong></p>
<p>微积分的故事中，逻辑落后于直觉的情况更多，那些研究微积分的天才看起来和常人也差不多。</p>
<p><strong>微积分是几何学的产物</strong></p>
<p>圆是一种很特别的形状，它十分完美。大自然中圆无处不在，当我们凝视圆的时候，圆实际上也在注视着我们，因为它们就在我们所爱之人的瞳孔和虹膜的圆形轮廓中。</p>
<p><strong>圆的专一</strong></p>
<p>在数学上圆体现的是一种没有变化的变化，一个点绕着另一个点运动，尽管方向不断在变化，它们之间的距离却始终不变。</p>
<p>几何学执着于平直性，因为它容易理解，正是这种执着和征服曲线的“珠峰”的原始冲动碰撞出了微积分的火花。</p>
<p><strong>微积分的诞生</strong></p>
<p>圆的面积   切披萨   移动披萨块组成矩形    顶边底边长度等于圆周长的一半    侧边长等于圆半径   圆周长和半径可用卷尺测量</p>
<p>把披萨不断切割成更小块就更接近矩形，当披萨块数量到达无穷时，<strong>极限</strong>矩形诞生了。</p>
<p><strong>极限的不可达性</strong></p>
<p>披萨块拼成的图形，经过无数次细分后会越来越逼近矩形。遗憾的是，永远不可成为真正的矩形，就像朝一面墙每次走一半的距离，永远不可能到达墙根。</p>
<p>幸运的是，在微积分中极限的不可到达性无关紧要。通过想象，我们能够到达极限，然后看看这种想象意味着什么，这常常就足以解决我们手头的问题。</p>
<p>但是不要认为不可达就不存在。从一开始，微积分就固执地认为万物是连续的（时间空间物质能量）。</p>
<p>万物——空间和时间，物质和能量，一切已经存在和将要出现的事物都应该被视为连续的。</p>
<p>麦克斯韦的电磁理论、牛顿的引力理论、爱因斯坦的相对论等都建立在空间和时间连续的假设上。到目前为止，这种假设一直很成功。</p>
<p><strong>极限尺度</strong></p>
<p>普朗克长度  普朗克时间</p>
<p><strong>关于无穷的趣事</strong></p>
<p>在操场上，无穷曾以嘲弄和抬杠的方式出现：</p>
<p><code>你是个混蛋！</code></p>
<p><code>是啊，好吧。你是两倍的混蛋！</code></p>
<p><code>你是无穷倍的混蛋！</code></p>
<p><code>你是无穷加1倍的混蛋！</code></p>
<p><code>那和无穷倍是一样的，你这个笨蛋！</code></p>
<hr>
<p><strong>原来微积分在小学就已经学了</strong>          无限循环小数0.333…=1/3，</p>
<p>追击问题，兔子追乌龟，兔子10米每秒，乌龟1米每秒，起点乌龟领先10米</p>
<p>微积分的思想：</p>
<p><code>1秒后兔子追平落后的10米，此时乌龟又领先1米</code></p>
<p><code>0.1秒后兔子追平落后的1米，此时乌龟又领先0.1米</code></p>
<p><code>0.01秒后兔子追平落后的0.1米，此时乌龟又领先0.01米</code></p>
<p><code>...</code></p>
<p>相当于无穷级数1+0.1+0.01+…=1.11…=10/9</p>
<p>当然还有另外的求解方法。比如设兔子追上乌龟用时为t秒，10t=10+t，就可以解得t=10/9。</p>
<hr>
<p>阿基米德  <strong>用三角形逼近抛物线弓形</strong>   无穷级数   重量想象</p>
<p><strong>计算机动画电影</strong>之所看起来栩栩如生，部分原因在于它们体现了阿基米德的洞见：任何平滑的表面都可以令人信服地用三角形来来逼近。</p>
<p>梦工厂创作史莱克与当地暴徒搏斗的场景时，每一帧都要用到不少于4500万个多边形。阿凡达更是用了数十亿个多边形，在潘多拉星球上的每一株植物，动画师都使用了大约100万个多边形。</p>
<hr>
<h3 id="地球上的运动——阿基米德的学生伽利略-理性主义者">地球上的运动——<strong>阿基米德的学生伽利略</strong>     理性主义者</h3>
<p>奇数1、3、5、7……隐藏在物体下落的过程中</p>
<p>垂直落体运动太快没有足够的科技手段进行观察记录，怎么办？</p>
<p><strong>斜面试验——科学极简主义的艺术</strong></p>
<p>“凹槽雕刻得非常平直，打磨得十分光滑”，“沿凹槽滚动的是一个坚硬光滑的铜球，非常圆”</p>
<p>之所以关注斜面凹槽的平直度、光滑度、球的坚硬度、圆度、光滑度，因为伽利略想让球在它能设法实现的最简单最理想的条件下滚落，尽可能减少潜在问题的影响。</p>
<p>背后的艺术性，通过提出一个美丽的问题，伽利略从大自然那里“哄骗”出一个美丽的答案。他就像一位抽象表现主义画家。</p>
<p>简单、简介、最小化是很棒的审美</p>
<hr>
<h1><strong>----------------读书反思</strong></h1>
<p>现在我最大的问题是，看到现在有90多页了，但是如果要我去给别人讲述，我就好像什么也不记得了，只留下对这本书的总体印象，好书，值得读，有收获！但具体是什么我却完全回忆不起来了。。。我是病了吗</p>
<p>通过上面这么一想，倒是记起来一些东西      圆的面积——切割披萨  无穷细分再重组    抛物线弓形——三角形迭代拟合    假想重量天平   内接外接三角形——夹逼  计算机电影制作——阿凡达</p>
<p>虽然记起来一些，但也是支离破碎的，零零散散的，我的记忆力真是太差了！</p>
<hr>
<p>研究抛体运动时，忽略阻力等噪声，关注信号本身，这样才能尽力捕捉到关于物体运动的真相与美。</p>
<h3 id="苏格拉底式对话？">苏格拉底式对话？</h3>
<p>钟摆的等时性    <strong>节拍器和摆钟的原理</strong>    钟摆摆动是所有摆动的始祖，它的规律具有普适性</p>
<p>小幅度小于20度的摆动节奏不变，无论摆动幅度大或小，摆动一次的用时相等。</p>
<p>在物理学和工程学领域，中百的摆动变成了振动的范式。</p>
<p>约瑟夫预言   在接近绝对零度的条件下成对的超导电子可以来回隧穿一道难以穿透的绝缘屏障。</p>
<p>约瑟夫森结   能探测到地球磁场1000亿分之一的微弱磁场，被应用与探测地下石油资源。神经外科医生用它寻找脑内肿瘤的位置。为下一代计算机的极速芯片、量子计算机奠定基础</p>
<h3 id="钟摆赋予了人类第一种准确计时法">钟摆赋予了人类第一种准确计时法</h3>
<p>如果有一台非常精确的时钟，航海经度问题便可以得到解决     可能用到的另一个原理是正午太阳偏角和地球赤道半径    估算出的距离误差在几公里</p>
<p><strong>重复性的往复运动可以用来计时</strong></p>
<p>原子钟，可以精确测量铯原子在两种能态间转换的次数，每秒钟919 263 1770次。</p>
<p><strong>反过来时间也可以确定你的位置</strong></p>
<p>GPS的24颗卫星在12000英里的高空绕轨运行，当你使用汽车上的GPS导航时，你的设备至少会从其中的4颗卫星那里接收无线信号，每颗卫星搭载了4个原子钟，时间精度均可达纳秒（十亿分之一秒）级，你的设备会接收到一连信号，其时间戳精确到纳秒，因此定位误差控制在几米   其中的原理是将它们惊人的时间精密度转换成我们期望的GPS定位空间精密度   另一个原理是三角测量，计算四颗卫星发送和接收信号的时间差乘以光速得到距离差，进而通过三角测量得到汽车的位置，还可以计算出海拔和速度。</p>
<h3 id="太阳系的运动——开普勒-神秘主义者">太阳系的运动——开普勒    神秘主义者</h3>
<p>几何学统治着宇宙！行星虽不像他最初猜想的与5种柏拉图立体有关，但他的直觉是正确的，行星的轨道是椭圆。</p>
<p>“现在从8个月前的黎明、3个月前的白昼和几天前开始，当充足的阳光照亮我奇妙的猜想时，已经没有什么能阻止我了。我心甘情愿地陷入这种神圣的狂热状态。”</p>
<p>科学进步不是由逻辑主宰的！很多科学发现中感性也发挥出了很大作用！</p>
<p>作家亚瑟·库斯勒机敏的观察到，“约翰尼斯·开普勒迷恋上了毕达哥拉斯的梦想，并且在这种幻想的基础上，通过同样不可靠的推理方法，构建起现代天文学的坚固大厦。这是思想史上最令人震惊的片段之一，也是摒除‘科学进步由逻辑主宰’这个道貌岸然的信念的方法”</p>
<hr>
<h1><strong>----------------读书反思</strong></h1>
<p>P118，3月14日早上，我觉得读书速度太慢了。于是尝试用我教外甥女读数学题的方式进行阅读。在读这本书时，确实速度更快了，也更有节奏感，甚至觉得有趣了。这种方法就是：将注意力只集中于关键词，在心里只读出关键词，句子的其他部分只用眼睛余光看到就能理解，不要在心里默读，那样太耗费时间。</p>
<p>真的有趣！一小时读了昨天半天的页数了！</p>
<p>另一个感觉就是这样子   气势凌驾于书本之上，想想我教外甥女时的场景，有那种气势在，就读书就像在做一件及其简单的事了（洒洒水的感觉。总之就是很自信吧！感觉和书的作者平等了，其实是把作者的身份抛却了！不想着这是什么艰涩难懂的东西，不想着作者有怎样的学识地位所以才能懂，那么你也能懂了！）</p>
<p>不过  话说回来  学习数学史科学史    真实让人自卑的事情    因为很早以前，数学科学这些都是不赚钱的行业，所以能够搞这方面研究的人几乎都是有钱人家的孩子，所以在书中经常能看到类似“他致力于数学研究，纯粹是因为他喜欢数学”之类的话，他们通常都不用考虑经济问题，四处游历，讨论他们的研究。着实是羡慕不来！</p>
<p>那么我之前想写哪些科研中的喜悦，现在看来那种喜悦，是我能学得来的么。。</p>
<hr>
<h2 id="解析几何">解析几何</h2>
<p>让不同数学域相互作用与合作。数域，比如热量200卡路里或面包的数量3块。符号域，比如y=200x。</p>
<p><strong>几何学直观具象</strong>，诉诸人的<strong>右脑</strong>，命题的真实性，一目了然。但几何证明不知从哪里入手。</p>
<p><strong>代数是系统性的</strong>，是<strong>左脑</strong>型，机械式的，像织毛衣一样简单，但是重复枯燥，被赋予意义前它什么也不是。</p>
<p>两者联合，势不可当。<strong>代数给几何学一个体系</strong>，此时几何学需要的不再是创造力而是韧性。它将依靠洞察力的难题，转化成虽然耗时费力但却简单直接的计算。符号的使用解放了头脑节省了时间和精力。<strong>几何学赋予代数意义</strong>，不再空洞枯燥乏味，而是化身为弯曲有致的几何形状。</p>
<h3 id="数据压缩">数据压缩</h3>
<p>最优化问题，求最值，不知可以用导数，早期   <strong>费马</strong>用的是  重交点的方法。  费马怎么知道在到达最优解之前一定有两个交点呢？。。。</p>
<p>在图像压缩和音频压缩中的应用，   MP3和  JPEG</p>
<p><strong>数据集</strong>：昼长</p>
<p>正弦波      一年中昼长随随时间的变化时一条正弦波型曲线，年复一年画出来则是一段连续的正弦波</p>
<p><strong>哪里有圆周运动哪里就有正弦波</strong></p>
<p>只要循环现象发生，正弦波就会出现。</p>
<p>荧光灯和电力线，60Hz，就是60个正弦波周期/秒，那些烦人的嗡嗡声就是正弦波每秒钟上下起伏60次产生的~</p>
<p>昼长波的<strong>周期</strong>是一年，一年的精确值是365.25天，多出来的1/4天就是每4年要有一个闰年的原因！</p>
<p><strong>平均数</strong>是波的基线值，昼长波的平均数代表一年中该地平均昼长    春分  秋分是该波形图两次经过平均数的时间（左右，大约估计，不是精确在这一天）。</p>
<p><strong>波幅</strong>，说明了最长昼长与平均数的差距。</p>
<p><strong>相位</strong>决定图的水平位置，改变相位波形图相应的左右平移，昼长波（图略了！就是6月作为对称轴的类抛物线的样子）的相位说明了春分前后会向上穿过平均数。</p>
<p><strong>数据压缩</strong>  目前据我的理解   就是用确定曲线的参数（一个方程加截断条件）来代替这条曲线上的拟合点（很多个点）</p>
<p>比如昼长数据集中，每两周采集一个昼长，一年得到27个数据，画出散点图，用一条正弦波图像来拟合，则只需知道正弦波的周期、平均数、波幅、相位4个参数，其中周期是1年，那么只需记录3个参数，如此一来，压缩率达到27/3=9。</p>
<p>那么难点在于，找到一条完美拟合这些数据点的（尽可能完美，能够接受的程度！）的正弦曲线</p>
<p>那么可以调整正弦波的3个参数，得到正弦波，计算各个数据点与拟合曲线的总误差，下冲和过冲都应该受惩罚，所以总误差取各点误差的平方和。通过这样的方法，我们找到正弦波拟合与数据点总误差最小的3个参数。<strong>这种方法称为最小二乘法</strong></p>
<p><strong>模式是让数据压缩成为可能的首要条件</strong>！幸运的是，人们感兴趣的事物都是高度结构化、模式化的，比如音乐、面孔、指纹。</p>
<p>为识别局部特征，提出了一种广义化正弦波——子波， 并不是在两个方向上周期性地无限延伸，而是在时间或空间上急剧集中。突然启动，振动一段时间然后停止，像心电监护仪上的信号。</p>
<p>笛卡尔的光学论著   光的折射，当光从光疏介质进入光密介质时，光线会朝着两种介质垂线的方向弯曲；当光从光密介质中进入光疏介质时，光线会朝远离垂线的方向弯曲，比如水下反射出来的光进入空气中入射到我们眼中是从密到疏，入射光线与界面夹角偏小，所以你看起来鱼在偏远的位置。其实水中的鱼在更靠近你的位置，靠近多少取决于折射率（知道折射角的话就能够解三角形计算出来）</p>
<p><strong>费马</strong>  <strong>最小时间原理</strong>   就是说<strong>最小作用量原理/最优性原理</strong>   就是说大自然会以最经济的方式运行。光会以最有效的方式传播，不是最直接而是最快！</p>
<p><code>莱布尼兹通过最优性原理认为，在所有可能的世界中，我们的世界是最好的一个！它的一切也都是最好的！</code></p>
<p>解析几何——切线——导数（很遗憾费马错过了它）——（牛顿-莱布尼兹统一了微分学和积分学）微积分~~~</p>
<p>10 的零次方为什么等于1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1  10</span><br><span class="line"></span><br><span class="line">2  100</span><br><span class="line"></span><br><span class="line">3  1000</span><br><span class="line"></span><br><span class="line">1+2=3    10*100=1000	//10^1*10^2=10^(1+2)</span><br><span class="line"></span><br><span class="line">2-1=1     100/10=10		//10^2/10^1=10^(2-1)</span><br><span class="line"></span><br><span class="line">对应的</span><br><span class="line"></span><br><span class="line">1-1=0   10/10=1			//10^1/10^1=10^(1-1)</span><br></pre></td></tr></table></figure>
<p>10的次方要谨慎对待，即使指数相差1，差距也是十分巨大的，而且这极容易混淆，认为差距只是1。</p>
<p>比如，工资50万和5万，再比如PH值从7到2，代表的是氢离子浓度增加10万倍。但PH从7到2的度量方法，让这个过程看上去只是走了5小步，根本没发生多大变化。</p>
<h3 id="函数"><strong>函数</strong></h3>
<p><strong>对数</strong>，用简单的加法取代了乘法问题。再开普勒那个时代，对数简直就是超级计算机。</p>
<p>指数可以为越来越快的增长过程建模，幂函数可以为不太剧烈的增长方式建模。将函数都看成是工具，比如指数函数是锤子，可以敲钉子，那么对数函数就是对指数函数的撤销， 相当于起钉器！    它们是<strong>反函数</strong></p>
<p><strong>自然对数e是微积分领域的宠儿</strong>，因为e^x的变化率等于它自身！从解析几何来看，就是它的曲线任一点的斜率等于该点的高度！换句话，就是说它是它自身的导数！</p>
<p>其他数的变化率与数本身成正比。这些都是<strong>爆炸式增长、滚雪球式增长、指数增长</strong></p>
<p>麦克风的咆哮声，当我们使用扬声器和麦克风时，如果麦克风接收到扬声器的声音就会发出很大的噪声，因为扬声器包含一个放大器，会将输入的声音音量乘一个常数，如果麦克风接收到扬声器的声音，并再次通过放大器，它的音量将在正反馈电路中被反复放大，导致音量突然失控，以与当前音量成正比的速率增加，因而产生刺耳的啸叫声。</p>
<p>还有核链式反应，铀裂变分离出中子，中子撞击其他原子，分离出更多中子，中子数量的指数增长就会引发核爆炸。</p>
<p>相反的就是   <strong>指数衰减</strong></p>
<p>实际问题中，变化率并不是一个恒定的值，而是一个不断变化的量，而变化率的变化规律就是<strong>导数</strong>    一个变化率关于自变量的函数</p>
<p>更平常的来看导数，只要我们想要量化某个事物的变化与另一个事物的变化之间的关系，就会用到导数。</p>
<p>有些实例我们容易混淆，不容易与导数建立关联。增加一种汀类药物的剂量，会在多大程度上提升其降低胆固醇的水平，或者增加其引发肝损伤等副作用的风险。</p>
<p>不断变化的变化率才是微积分的精髓，不要把线性关系的变化率当做一个数，而应看成是常函数，是线性函数的导数。看成一个数容易造成混淆。</p>
<p><strong>函数  方程  函数图像  的区别</strong>    函数是变量之间确定的对应关系，是无实体的规则。方程是这种关系的数学表达式。函数图像是可见的有形的，是由方程定义的图形。</p>
<p><strong>重新定义我脑子里的光滑的概念</strong>：如果一条曲线在任何一点处被充分放大后，它越来越直，那么它是光滑的！</p>
<p>可以看出变化率函数图像比昼长函数早3个月到达最高峰，因为周期是12个月，相当于提前了1/4个周期，而这正是正弦波的特别之处：如果一个变量遵循完美的正弦模式，那么它的变化率也是一个完美的正弦波，并且在时间上提前了1/4个周期。</p>
<p>昼长函数及其导数的图像：</p>
<img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/qq_pic_merged_1647332901253.jpg" style="zoom:50%;" />
<p>这种神奇再生现象——傅里叶分析中会再讲</p>
<h3 id="毕加索：“艺术是让我们认识真理的谎言”"><strong>毕加索：“艺术是让我们认识真理的谎言”</strong></h3>
<p>连续-光滑——可导——微积分   如果我们设法把测量的<strong>分辨率</strong>推升得过高，在时空中极其细微地观察任何现象，就会看到<strong>光滑度的崩解</strong>。</p>
<p>和所有科学领域一样，在建立数学模型时，我们总要对强调什么和忽略什么做出选择。抽象的艺术在于 知道什么是必不可少的，什么是细枝末节的；知道什么是信号，什么是噪声；知道什么是趋势，什么是波动。</p>
<table>
<thead>
<tr>
<th style="text-align:center"><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203162123398.jpg" style="zoom:14%;" /></th>
<th><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/IMG_20220316_185815.jpg" style="zoom: 13%;" /></th>
<th><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203162205085.jpg" style="zoom: 15%;" /></th>
</tr>
</thead>
</table>
<p>微积分——a calculus/my <strong>caculus</strong>（莱布尼茨）</p>
<ul>
<li>caculus 这个词本身有很多故事，源自拉丁词根calx小石头，很早以前人们用鹅卵石计数和计算。牛顿患有膀胱结石，莱布尼兹患有肾结石。</li>
</ul>
<p>学习微积分的学生一直浸淫在基本定理中，所以视其为理所当然</p>
<h3 id="牛顿把面积看成一个流动的或移动的量"><strong>牛顿把面积看成一个流动的或移动的量</strong></h3>
<p>距离在速度-时间图像上的体现就是斜率/导数</p>
<p>反过来速度在距离-时间图像上的体现则是速度曲线下方累积到时间t的面积</p>
<p>微积分基本定理的<strong>运动版本</strong>：速度曲线下方的面积随时间的累积会给出距离随时间的变化情况</p>
<p>微积分基本定理的<strong>几何版本</strong>：将运动版本中的变量时间改成某个距离</p>
<img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203162227186.jpg" alt="几何版：油漆刷的长度y(x)随距离x改变" style="zoom:15%;" />
<h3 id="微积分的三大核心问题"><strong>微积分的三大核心问题</strong></h3>
<ul>
<li>正向问题   已知一条曲线，求他各处的斜率     <strong>求导</strong></li>
<li>反向问题   已知一条曲线各处的斜率，求这条曲线    <strong>积分</strong></li>
<li>面积问题   已知一条曲线求它下方的面积    <strong>积分</strong></li>
</ul>
<p>曲线下方的面积（求导）——&gt;曲线（求导）——&gt;曲线的斜率</p>
<p><strong>面积对几何学至关重要，而积分对一切来说都至关重要！</strong></p>
<p>反向问题和面积问题是一出生就被拆散的双胞胎，或者说是人们看到的同一枚硬币的两面，本质相同。</p>
<p>面积问题解决==反向问题解决</p>
<p>曲线求积问题是积分学的圣杯，因为很多其它问题都可归结为这个问题。</p>
<p>从现代的角度，面积问题旨在预测以不断变化的速率变化（变加速度运动）的事物与它随时间的累积程度之间的关系</p>
<p>牛顿提出<strong>流数术</strong></p>
<ul>
<li>
<p>流量（现在认为是指时间的函数），流数是指流量的导数，或随时间的变化率</p>
</li>
<li>
<p>明确了微积分的两个核心问题：</p>
<ul>
<li>已知流量求流数  求导  即<strong>微分</strong>！
<ul>
<li><strong>局部问题</strong>   舍弃了<strong>显微镜</strong>所关注的那点的无穷小邻域以外的所有细节</li>
</ul>
</li>
<li>已知流数求它们的流量    面积问题的关键所在  根据变化率推导未知函数  根据斜率推导曲线  <strong>积分</strong>
<ul>
<li><strong>整体问题</strong>  是用望远镜遥望远方，预测未来，所有干预事件都很重要不能被忽略。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>整体问题比局部问题难得多！</p>
<p>关于牛顿的一些故事，艾萨克·牛顿，出生前3个月父逝，母亲改嫁，自然成了一个孤寂的男孩，16岁前在学校，学校评价其懒惰爱分心，但夜晚一个人在家他会在墙上画阿基米德画过的圆和多边形。辍学一段时间管理家庭农场后，返校，学术上表现优异，工费进入剑桥大学，公费意味着要在学校餐厅勤工俭学，吃残羹剩菜的情况时有，大学乃至一生几乎没有朋友，从未谈恋爱和结婚，也很少开怀大笑！</p>
<h3 id="微积分运算变得毫不费力！">微积分运算变得毫不费力！</h3>
<p><strong>幂级数法</strong>，牛顿在思考圆的面积时偶然所得。</p>
<ul>
<li>在研究圆弓形面积时，他利用解析几何的知识将圆写成方程的形式，并且认为平方根等价于1/2次方。</li>
<li>平方根的运算还没有方法，于是他选择了避免对平方根进行计算，转而计算对应整数次方的圆弓型面积</li>
<li>根据整数次方的圆弓星面积，牛顿猜出了1/2次方的圆弓形面积，就是惊人的幂级数形式。</li>
</ul>
<p><strong>双曲线</strong>   双曲线弓形下方的面积对应的幂级数   <strong>自然对数</strong>  ln(1+x)</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203181527033.png" alt=" "></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203181417206.png" alt=""></p>
<p>然后进军  <strong>三角函数</strong>     早于牛顿250年前印度数学家就发现了三角函数的幂级数</p>
<h3 id="混搭大师">混搭大师</h3>
<p>在发现幂级数的过程中古希腊人的无穷原则解决几何学中的面积问题，把印度人的小数。伊斯兰人的代数和法国人的解析几何融入其中。</p>
<p>牛顿与阿基米德的相似处</p>
<ul>
<li>阿基米德研究抛物线弓形面积    <strong>数字级数</strong>  相当于幂级数的一个特例！</li>
<li>牛顿研究圆弓形面积    <strong>幂级数</strong></li>
</ul>
<p>牛顿站在巨人的肩膀上</p>
<ul>
<li>他统一、综合和归纳了伟大前辈的思想     创造了一种新事物——通用的级数法（通过变量x，他定义了无穷个无穷级数 ）
<ul>
<li>他继承了阿基米德的无穷原则</li>
<li>他的切线知识来自费马</li>
<li>他使用的小数和变量x分别来自印度数学家和阿拉伯代数</li>
<li>他用方程表示xy平面上曲线的做法来自笛卡尔的著作</li>
<li>他对无穷的随心所欲的玩法、他的实验精神及他对猜想和归纳的开放性态度都来自沃利斯。</li>
</ul>
</li>
</ul>
<p>微分才是微积分的核心，导数是微分的一部分，是后来引入的东西。</p>
<p><strong>无穷小量</strong></p>
<ul>
<li>无穷小的数</li>
<li>无穷小的长度  尽管不是一个点，但却比你能想到的任何长度都小</li>
<li>无穷小的时间  尽管不是一瞬间，但却比你能想到的任何持续时间都短。</li>
</ul>
<p><strong>微积分背后的核心观点</strong></p>
<ul>
<li>在很多自变量x和因变量y之间的关系问题中输入一个小的变化量△x（偏移）都会使输出产生一个小的变化量△y</li>
<li>这个小变化量通常是以我们可利用的结构化方式组织起来的，比如y=x^3，x=(x+△x)，则y=<u>x^3</u> + <u>3·x^2</u>·**△x **+ <u>3·x·</u><strong>△x^2</strong> + <strong>△x^3</strong></li>
<li>输出的变化量包含不同层级的部分，按照大小无穷小的部分还可  分级为小、超小、超超小……  <strong>高阶无穷小量</strong></li>
<li>我们关注<strong>占主导地位的变化量</strong>，忽略更微小的变化量
<ul>
<li>如果输入的变化量是<strong>有限的</strong>，比如2+0.0001，那么无疑得到的只是近似结果。</li>
<li>但如果输入的变化量<strong>△x是无穷小</strong>的，那么这种<strong>近似处理</strong>反而得到<strong>精确的结果</strong>！</li>
</ul>
</li>
<li>那么处理y的三次方这个函数时，如果dx是一个无穷小的差分，dy就可以取<u>x^3</u> + <u>3·x^2</u>·**dx **，保留dx一次方项，是为了研究无穷小变化量！</li>
</ul>
<p>我们课程所学大多是通过极限的思维来讲解，但其实通过无穷小来理解更接近微积分的本质，这时它们（dx、dy）叫做微分！</p>
<img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203181525533.jpg" style="zoom: 25%;" />
<p>无穷小量dx尽管不等于0，但也必须满足类似x+dx=x这样无意义的方程</p>
<p>一旦我们学会无穷小量，它们就会给出正确的答案。对我们而言，它们带来的好处可以大大弥补它们可能会造成的精神痛苦。就像毕加索眼中的艺术一样，它们也是能让我们了悟真相的“谎言”。</p>
<img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203181607315.jpg" style="zoom:25%;" />
<p>在放大无穷倍的条件下，曲线下方对应△x的区域才是一个矩形，对宽度为任意一个有限值△x的竖条来说，面积的变化量是由两个部分来组成的，除了矩形部分还有上面的帽子部分。当矩形宽度趋于零，无穷小量时，即变成dx时，相较于矩形面积，“帽子”的面积就可以忽略不计！，因为矩形是小的，而“帽子”是超小的部分。无穷小的世界比现实世界更美好就体现在这！   dA=dx*f(x)，f(x)=dA/dx，嘭！这就是微积分基本定理！</p>
<hr>
<h1><strong>----------------读书反思</strong></h1>
<p>这里有点像变魔术一样啊。忽略了高阶无穷小后得到了导数的表达式</p>
<hr>
<p>积分的符号是个拉伸的S，实际在提醒我们求和，求无穷多个宽度为无穷小的矩形条的面积之和</p>
<p>趣事：<strong>大凡尔赛——莱布尼兹！</strong></p>
<p>莱布尼兹用微积分轻松推导出光折射的正弦定律，并且自豪的指出：“其他学时渊博的人大费周章得出的结论，精通微积分的人却好像拥有魔法一样，只做了几步推导就搞定了。”</p>
<p>惠更斯级数求和问题，促使莱布尼兹发现了积分的奥秘    类比！：高度计测台阶的高度   可以改写成连续差形式（分数拆分）    <strong>伸缩和</strong></p>
<h3 id="微积分与艾滋病治疗"><strong>微积分与艾滋病治疗</strong></h3>
<p>癌症病理：病毒攻击并感染白细胞之辅助性T细胞，操纵细胞的遗传机制，利用他们制造更多病毒。</p>
<p>癌症表现为感染时类流感症状，最长可达10年的慢性和无症状期，艾滋病末期突然爆发</p>
<ul>
<li>抗反转录药物    病毒很快产生抗药性</li>
<li>蛋白酶抑制剂   干扰新产生的病毒颗粒  能有效抑制病毒增长</li>
<li>十年的稳定期是最大的疑点，出于试验的目的，何大一和佩雷尔森给患者注射了蛋白酶抑制剂，追踪到了人体免疫系统对抗HIV病毒的动态过程，所有患者血流中的病毒颗粒呈指数下降。利用微分学为这种指数衰减建模，用指数函数拟合，得出了惊人的结果。
<ul>
<li>血流中病毒数量衰减速率呈指数，一开始衰减很快最后衰减很慢，就像排放满满一桶水，最后水少了压力小了，排水就慢了</li>
<li>无症状期就像同时开启水龙头和排水口，达到调平状态！不是潜伏期，而是免疫系统和HIV病毒激烈的持久战！！！</li>
<li>根据在调定点病毒浓度保持不变，估算出稳态病毒载量大约为10亿，就是每天有10亿病毒被免疫系统清理，同时又有10亿病毒被制造出来！</li>
<li>再次实验时，缩小了时间间隔，来放大观察免疫系统对抗HIV病毒的过程！用数据去拟合模型，稳态病毒载量更新到100亿。而且<strong>被感染的T细胞寿命只有2天</strong></li>
</ul>
</li>
</ul>
<p>他们的研究颠覆了对癌症治疗的基本观点</p>
<ul>
<li>研究之前普遍认为无症状期是HIV病毒休眠潜伏！，所以应该在无症状期间保留实力，不用药，以免病毒对药物产生抗性而无计可施，在无症状期结束时才用药更明智。</li>
<li>研究之后会发现，从感染初期开始免疫系统就迫切希望得到帮助，以控制病情。</li>
</ul>
<p>病毒复制和突变的速率惊人，以至于总能找到逃避所有药物治疗的方法。必须联合使用多种药物才能打垮抑制HIV，通过利用数学工具，考虑HIV测定突变率、基因组大小，每天产生病毒颗粒数量等因素，用数学方法证明了在其基因组内的所有碱基上，HIV每天会多次发生各种可能的突变。即使是单一的突变也可能产生抗药性，单一药物治疗希望渺茫。在所有可能的双重突变中，有相当一部分也会每天发生，因此使用两种药物起效概率较高，但还不可靠。计算结果表明，HIV能够同时发生必要的三重突变以逃避三联疗法的概率大概是千万分之一。</p>
<p>三联药物治疗，两周患者体内病毒降到初始的1%，两个月时基本检测不到病毒，但不一定完全清除，因为HIV可以隐藏在人体各处，一旦停止治疗，立刻又卷土重来。癌症变成有药可治的慢性病（昂贵！）</p>
<p>微积分进化的故事是杂交的过程，引入以微积分为基础的工具，比如积分、无穷级数和</p>
<p>、幂级数。</p>
<hr>
<h1><strong>----------------读书反思</strong></h1>
<p>想做的事情多起来，反倒没法沉浸式体验一件事了。</p>
<p>当初刚来实验室，也还没上课，老师让我看这本书，跟着师兄做做实验   感觉真好</p>
<p>能够完全投入地看书。重点在于感觉生活很简洁。在做这件事的时候快乐感很大！</p>
<p>想做的事情多了，待办列表长长的，又开始茫然了，每件事都挺难的。。。或许是因着这个所以怕了，倦了！</p>
<p>我这不是学了微积分吗，不妨先微分！专心解决局部，最后“积分”一下，整体就解决了！</p>
<hr>
<p>微积分是数学领域的寒武纪大爆发，数学领域的多样性开始“进化”产生</p>
<ul>
<li>“微生物”，数字 形状 和字问题</li>
<li>多细胞生物，高级数学分支，像微分几何、积分方程和解析数论</li>
</ul>
<p>牛顿理论的核心是他的运动微分方程：F=ma，是啊！a是速度的变化率。</p>
<ul>
<li>
<p><strong>预测未来的先知</strong>   通过运动微分方程   可以知道未来一段时间的运动物体的速度变化情况   通过速度变化情况可以知道物体的位置变化</p>
</li>
<li>
<p>牛顿怎么知道的呢？猜测是这样哈</p>
<ul>
<li>实验发现运动物体速度变化量与物体所受外力成正比</li>
<li>于是假定了一个系数m</li>
<li>重力加速度能测出来了</li>
<li>就发现系数m=物体重量/重力加速度</li>
</ul>
</li>
<li>
<p>由此得到惯性定律</p>
<ul>
<li>受力为0的物体，a=0，保持静止或原有的速度直线运动</li>
</ul>
</li>
</ul>
<p>力不是物体运动的必要条件，而是物体运动中产生变化的必要条件</p>
<p>像测量阶梯的高度用的方法一样，牛顿解决宇宙中二体相互作用问题时，对微积分的利用不需要逐一计算每个瞬间的速度，而是快速跃进，明确预测出在无限远的未来的状态！</p>
<p><strong>牛顿微积分与独立宣言</strong></p>
<p>牛顿的经验演绎法，以事实为基础，以微积分为动力，扫除了早期哲学家的先验形而上学方法。</p>
<p>牛顿的思想还在从决定论和自由到自然律和人权等所有启蒙观念上留下了印记</p>
<p>独立宣言</p>
<ul>
<li>效仿欧几里得在《几何原本》和牛顿在《原理》中的做法，也从公理（与主题相关不证自明的真理）着手，然后凭借逻辑的力量，从这些公理中推导出一一系列不可回避的命题。其中最重要的一个就是殖民地有权脱离英国的统治</li>
</ul>
<hr>
<h1><strong>----------------读书反思</strong></h1>
<p>F=ma，以前都不知道这是个微分方程，高中学的时候完全没联想到~~~</p>
<p>学以致用，知行合一    才是学习的目的呀    不过更可能的是那时候压根也没学懂什么是微积分、导数</p>
<p>看到283页了，后面的内容看起来比前面难一点了，涉及到微积分的具体内容，和在一些领域的应用。</p>
<p>这时候我看的比较细，就要接受和思考很多与微积分并不直接相关的这些领域的内容，这些其实对于我阅读这本书来说就是噪声，需要关注，只需要了解。这里我感受到了<strong>光滑的崩解</strong>！当我过于关注航空领域的事情是，不就是在把这个局部放大吗，关于微积分的阅读的光滑曲线就出现了巨大的噪声波动。</p>
<p>抽象的艺术在于 知道什么是必不可少的，什么是细枝末节的；知道什么是信号，什么是噪声；知道什么是趋势，什么是波动。</p>
<hr>
<p><strong>连续体和离散体：比如我们来看一碗汤</strong></p>
<ul>
<li>离散的角度（实际），一碗汤是一堆离散的分子，它们都在杂乱无章的跳跃。每个分子为对象，自变量是时间t
<ul>
<li>对象太多了</li>
<li>每个对象的运动都太过复杂！</li>
<li>单自变量，每个对象一个常微分方程</li>
</ul>
</li>
<li>连续的角度（近似），看成是一个连续体，连续体的各个位置（x,y,z）和时间t都是自变量！
<ul>
<li>多自变量</li>
<li>一个偏微分方程！</li>
</ul>
</li>
</ul>
<p>连续体假设这个在流体力学中好像很常见！！！当时完全不理解！</p>
<p>弹性、声学、热流、流体流动和气体动力学等定律都是偏微分方程。</p>
<p>现代科学中的微积分应用主要体现在偏微分方程的建立、求解和解释！</p>
<p>爱因斯坦的广义相对论。将引力重新设想为思维时空弯曲的表现。将时空比作一个好似蹦床表面的有弹性、可变形的结构。把一个重物比比如一个保龄球放在它中心，它就会在重量的作用下弯曲，现在想象一个更小的东西比如弹珠，在蹦床的弯曲表面上滚动，由于保龄球重量导致蹦床表面凹陷，它使弹珠的运动轨迹发生偏移，它不再沿直线运动，而是沿着弯曲表面轮廓，反复绕保龄球旋转。这就是行星绕太阳转动原因，它们并未感受到力，而只是在弯曲时空中，沿着阻力最小的路径运动。</p>
<p>这段描述很生动形象！</p>
<h3 id="正弦波">正弦波</h3>
<p><strong>用微积分预测粒子连续介质的运动和变化</strong></p>
<p>傅里叶十岁成为孤儿，十几岁时体弱多病，认为热量对健康至关重要，即使在夏天他仍然要待在最热的房间里，裹上厚大衣。他专注于热，发明了全球变暖的概念。</p>
<p>对热流的研究中，傅里叶提出铁棒上某一点的温度变化率正比于该点的温度与其两侧相邻点的平均温度之间的失配（关注点的两侧的无限接近的两个点）。他选择正弦波作为构建单元，因为它们能使问题变得更加简单。正弦不不会四处移动，当它们的热点降温冷点升温时，正弦波会减弱，变化的只是振幅~   也就是说如果温度的分布一开始是正弦波，那么随着铁棒的冷却，它仍然会保持这种模式。</p>
<p>正弦波在音乐中，它们是吉他、小提琴和钢琴琴弦的固有振动模态。</p>
<p>科学、数学与音乐之间的关联让我觉得很奇妙~     正弦波+正弦波可以得到三角波，进而多个正弦波叠加可以得到任意一种波？   纯音+所有泛音就形成了三角波。这是一个正弦函数表示的无穷级数和。<strong>三角波公式</strong>  （纯音如公式中的sin(x)，泛音如sin(3x)、sin(5x)） 任何乐器的时声音都可以用无穷多个音叉合成，我们要做的只是在适当的时间用适当的力度敲击音叉。电子音乐合成的原理~~~</p>
<p>正弦波的音干净而宽广如长笛，方波的音尖利而刺耳如警报，三角波的音喧闹嘈杂。</p>
<p><strong>万物皆波</strong>？  用傅里叶的方法可以分析各种波现象，热核爆炸的冲击波，通信的无线电波，在肠内促使营养物质吸收并推动废物朝着正确方向移动的消化波，大脑中与癫痫和帕金森震颤相关的病理性电波，公路上的交通拥挤波。</p>
<hr>
<h1><strong>----------------读书反思</strong></h1>
<p>看着看着到后面快乐少了，有点急切想赶紧看完。。。目的心太强了。</p>
<p>从早期科学家从事科研工作的故事中来看，在科研中，科学家的预感、审美显得十分重要。有些难以解决的问题最后竟然是通过感觉得出了合适的解释。科学的审美，崇尚的是简洁美。越是简洁的公式定理，往往蕴含着巨大的能量！</p>
<p>对正弦波算是有了新的认识吧，最基本的一点是</p>
<p>一个点在一个圆盘上绕圆运动，那么这个点在某个方向上的位移 随时间的变化就是一个正弦波~（位移-时间  函数图像）</p>
<p>偏微分方程把本是离散的研究对象在关注程度允许的条件下看成连续体来解决。把无穷个常微分方程的集合，变成一个偏微分方程来解决。<strong>有点像是逆无穷原则了。</strong></p>
<hr>
<h3 id="微积分的未来">微积分的未来</h3>
<p>会与很多先进前沿相关的应用</p>
<p>还会在人文、哲学等领域发挥作用</p>
<p><strong>无穷原则</strong>从一开始就存在！微积分可以用它的信条来定义：在解决关于任意连续体的难题时，先把它切分成无穷多个部分，然后一一求解，最后通过把各个部分的答案组合起来去解决原始的难题。这也是无穷原则的定义。</p>
<p>**DNA的缠绕数 ** 几个很形象的描述</p>
<ul>
<li>在你大约10万亿个细胞中，每个都有约2米长的DNA，如果它们收尾相连，那么足够在地日间往返几十次。</li>
<li>一个典型的细胞核的直径约为5微米，它是细胞内DNA长度的40万分之一，这个压缩系数相当于把20英里长的绳子塞到一个网球里。</li>
</ul>
<p>DNA包含了一个人成长发育所需的全部遗传信息，这么长也是理所应当得吧~</p>
<p>DNA双螺旋我知道，但不知中间还有一根线轴，以及它们有序的打包方式~</p>
<ul>
<li><strong>DNA打包</strong>的形象比喻。你拉紧一条橡皮筋，，用手指夹住它的一端，并从另一端扭转它。刚开始橡皮筋每次转动都会产生一个扭结，当积累的扭转超过临界值时，橡皮筋不再保持绷直状态，而会突然弯曲并盘绕在自己身上，仿佛在痛苦地扭动。最终橡皮筋聚成一团。实现了压缩。DNA也是这样做的。</li>
<li>扭曲和缠绕之间的转换，就好比一团卷好的水管，你去抽出来这种缠绕会转变扭曲，也就是你拿到的水管总是扭曲了很多个扭结的原因。或者我觉得可以拿风筝线来描述会更有体会，尤其质量不太好的风筝线感受最深，从线圈出来后就是有很多个扭结的，让强迫症心烦！</li>
</ul>
<h3 id="决定论及其局限">决定论及其局限</h3>
<p><strong>拉普拉斯妖</strong>      拉普拉斯设想的一种全知全能的智慧生物，它可以追踪宇宙中所有原子的所有位置，还有作用于他们的所有力。“如果这个智慧生物也能对这些数据进行分析，那就没有什么是不确定的了，未来也会像过去一样呈现在它眼前”          超奇妙的设想！</p>
<p>索菲·科瓦列夫斯卡娅证明了微积分的使用范围。她证明了不可能存在其它的可解陀螺，在她之前有人发现了两个，而她发现了一个，并证明这将是最后一个。这不是一个智力不足问题，而只是证明了根本没有能描述所有陀螺运动的特定类型的公式（时间的亚纯函数   不懂什么意思！~）但这从原则上说明了找到关于宇宙命运的公式无望。</p>
<p>非线性  可太难了！果然作者也认可！</p>
<p>索菲·科瓦列夫斯卡娅发现的不可解性与陀螺方程的一个结构特性有关，即该方程是非线性的。</p>
<ul>
<li>线性的，就像两个人称体重之和等于分别称体重相加，拉弓的力加大一倍弓被拉开的距离也增大一倍这种关系</li>
<li>非线性的系统，各个部分互相干扰、合作、竞争时，发生非线性的相互作用。
<ul>
<li>同时听两首喜欢的歌不会感受到双倍的快乐！</li>
<li>果冻和花生酱搭配更好吃！</li>
</ul>
</li>
</ul>
<h3 id="混沌">混沌</h3>
<p>开始方式的小小改变，也会产生大不相同的结果。</p>
<p>初期或许还可以预测，但是后期就完全失控。这个时间界限就是可预测性时界，整个太阳系的大概是400万年。</p>
<p><strong>庞加莱图</strong></p>
<p>钟摆的矢量场图</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203211039501.jpg" alt=""></p>
<p>在我们解释这幅图之前，请记住这是抽象的，因为它没有展示出钟摆的实际形象。矢量场图展示的是钟摆状态从一个时刻到达下一个时刻的变化情况的的抽象图示。</p>
<h3 id="模式！"><strong>模式</strong>！</h3>
<p>这个词似乎很重要！很多科学发现，就是在用某个模式去拟合真实情况。</p>
<p>类似于开普勒和伽利略他们发现的那些模式。    距离平方反比    斜坡1357</p>
<h3 id="结语部分">结语部分</h3>
<p>正确的运用无穷，微积分可以解开宇宙的奥秘。不知何故，人类发明的推理体系，竟然与自然的步调一致。微积分体现在生活、原子、宇宙等所有尺度上。</p>
<p>微积分告诉我们的事情是是我们过去没见过，现在见不到，将来也无法看见的东西。在某些情况下，它会告诉我们一些从未存在过但有可能存在的事物，前提是我们要拥有使它们魔法般出现的智慧。</p>
<ul>
<li>
<p>小数点后八位</p>
</li>
<li>
<p>发现正电子</p>
</li>
<li>
<p>可以理解的宇宙</p>
</li>
</ul>
<p>你知道吗，当一个物体穿过引力场时，时间的流逝可能会加快或者减慢。GPS卫星就需要考虑这一点，哪里的引力场较弱，会使时空曲率扭曲，并导致钟表比在地面上走时快，每天都会比地面上的时钟快45微妙，这听起来似乎不太多，但别忘了GPS需要纳秒级的准确度才能正常运转，而45微秒是45000纳秒，如果没有广义相对论的修正，GPS的误差将以每天10千米的速度不断累计，整个导航系统在几分钟之内就会失去导航价值。</p>
<p>作为漂浮在一个中量级星系中的一颗微不足道的行星上的一个无足轻重的物种，智人是如何成功预测出，在距离地球10亿光年之遥的浩瀚宇宙中的两个黑洞相撞后，时空会发生怎样的震颤呢？我们早在引力波到达地球之前，就知道他的声音应该是什么样子了。</p>
<h1><strong>那些科研中的喜悦</strong></h1>
<h2 id="阿基米德">阿基米德</h2>
<h2 id="伽利略">伽利略</h2>
]]></content>
      <tags>
        <tag>微积分</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Cpp基础</title>
    <url>/2022/03/06/Cpp%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1>C++编程介绍</h1>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/C++%E6%A1%86%E6%9E%B6.png" alt="C++框架"></p>
<p><strong>头文件到底是个什么东西？</strong></p>
<p>头文件其实跟源文件没什么区别，都是C++的源代码</p>
<span id="more"></span>
<p><strong>因为在编译的时候头文件中的内容会被直接copy进cpp文件</strong>，但是有的时候头文件会互相包含，这可能就会造成在一份源码中copy两次同样的头文件，<strong>这也是为什么需要ifndef endif 或者#pragma once的用处</strong>。</p>
<p>头文件相互包含总会有一个文件在另一个文件中被忽略。</p>
<p>因为预处理时include<strong>是将包含的文件中的代码插入到当前代码里,文件是不能包含自己的</strong>,如果相互包含编译器只能取舍一下,否则是不可能正常通过的。如果遇到这种情况就需要<strong>对头文件进行重构，修改其包含关系</strong></p>
<p>所以头文件里<strong>最好只放变量和函数的声明</strong>，而不能放它们的定义（如果多个函数都include定义，那么就会出错了）。</p>
<p><strong>但有三个例外！</strong></p>
<p>其一，就是const/static可以在<strong>头文件的中定义</strong>，因为const/static默认为全局数据区，<strong>仅在当前文件有效，即使被多个文件包含也只会定义一次</strong>。</p>
<p>其二，就是内联函数的定义。内联函数和普通函数的区别<strong>在于编译阶段编译器需要知道内联函数的内部具体实现</strong>（才能够将其展开插入源代码），<strong>因此将内联函数放于头文件甚至有好处的。</strong></p>
<p>其三，就是类的定义。程序在创建一个类对象的时候，编译器只有在类定义完全可见的情况下才能够对其进行布局（如内存分配、数据成员有哪些、函数接口有哪些），且也可以将函数成员的实现也放在头文件中，<strong>因为如果函数成员在类的定义体中被定义，那么就默认这个函数是内联的。</strong></p>
<p><a href="https://www.jianshu.com/p/1bab86143f1c">GCC详解</a></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/C++%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" alt="C++编译过程"></p>
<ol>
<li><strong>预处理器</strong></li>
</ol>
<p>C/C++的预处理器其实就是一个词法（而不是语法）预处理器，<strong>其主要完成文本替换、宏展开以及删除注释</strong>等，完成这些操作之后，将会获得真正地**“源代码”**。</p>
<p>常见的include语句即是一个预处理器命名，在预处理器中它将所有的头文件包含进来。</p>
<p>（该步骤的文件扩展名为.i）</p>
<ol start="2">
<li><strong>编译器</strong></li>
</ol>
<p>在这一步骤，将.i文件翻译为.s，得到<strong>汇编程序语言</strong>，值得注意的是所有的编译器输出的汇编语言都是同一种语法。</p>
<p><strong>注：内联函数就是在这一环节“膨胀”进源码的</strong>，它的作用即在于：不是在调用时<strong>发生控制转</strong>移，而是在编译时将函数体<strong>嵌入在每一个调用处</strong>，适用于功能简单，<strong>规模较小又使用频繁的函数</strong>。<strong>递归函数无法内联处理，内联函数不能有循环体，switch语句，不能进行异常接口声明。仅仅省去了函数调用的开销</strong>，从而提高函数的执行效率。如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。<strong>另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。</strong></p>
<ol start="3">
<li><strong>汇编器</strong></li>
</ol>
<p><strong>将</strong>**.s****翻译成机器语言指令**，把这些指令打包成一种叫做<strong>可重定位目标程序</strong>的格式，并将结果保存在目标文件.o中(把汇编语言翻译成机器语言的过程)。</p>
<ol start="4">
<li><strong>链接器</strong>**</li>
</ol>
<p>链接的主要内容就是<strong>将各个模块之间相互引用的部分正确的衔接起来</strong>。它的工作就是把一些指令对其他符号地址的引用加以修正。<strong>链接过程主要包括了地址和空间分配、符号决议和重定向。</strong></p>
<p>**符号决议：**有时候也被叫做符号绑定、名称绑定、名称决议、或者地址绑定，其实就是指用符号来去标识一个地址。比如说 int a = 6;这样一句代码，用a来标识一个块4个字节大小的空间，空间里边存放的内容就是4.</p>
<p><strong>重定位：<strong>重新计算各个目标的</strong>地址</strong>过程叫做重定位。</p>
<p>gcc会到系统默认的<strong>搜索路径”/usr/lib”下进行查找</strong>，也就是链接到libc.so.6库函数中去。</p>
<hr>
<p>函数库一般分为静态库和动态库两种。静态库是指编译链接时，<strong>把库文件的代码全部加入到可执行文件中，因此生成的文件比较大</strong>，**但在运行时也就不再需要库文件了。**其后缀名一般为”.a”。动态库与之相反，在编译链接时并没有把库文件的代码加入到可执行文件中，**而是在程序执行时由运行时链接文件加载库，这样可以节省系统的开销。**动态库一般后缀名为”.so”，如前面所述的libc.so.6就是动态库。<strong>gcc在编译时默认使用动态库。</strong></p>
<hr>
<p>.txt（代码段）</p>
<p>.data（全局静态已初始化变量）</p>
<p>.bss（全局未初始化变量）</p>
<p>heap（堆）</p>
<p>stack（栈）</p>
<p>内存分段见下图：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/C++%E5%86%85%E5%AD%98%E5%88%86%E6%AE%B5.png" alt="C++内存分段"></p>
<p>其中，.data用于<strong>存放初始化过的全局变量</strong>。若全局变量值为0，为了优化编译器会将它放在**.bss段**中。</p>
<p>.bss段被<strong>用来存放那些没有初始化或者初始化为0的全局变量</strong>。bss段只占运行时的内存空间而不占文件空间。在程序运行的整个周期内，.bss段的数据一直存在。</p>
<ol>
<li>
<p>内存栈区： 存放局部变量名；</p>
</li>
<li>
<p>内存堆区： 存放new或者malloc出来的对象；</p>
</li>
<li>
<p>常数区： <strong>存放局部变量或者全局变量的值</strong>；</p>
</li>
<li>
<p>静态区： <strong>用于存放全局变量或者静态变量</strong>；</p>
</li>
<li>
<p>代码区：二进制代码。</p>
</li>
</ol>
<p><a href="https://blog.csdn.net/jirryzhang/article/details/79518408">https://blog.csdn.net/jirryzhang/article/details/79518408</a></p>
<h1>C++基础知识</h1>
<h2 id="全局-局部静态变量？">全局/局部静态变量？</h2>
<p><strong>静态变量都存放于全局数据区</strong>，都在程序退出时才销毁，两者唯一的区别就在于<strong>作用域不同，全局变量全局可见</strong>，<strong>而局部静态变量仅在局部区域可见</strong>。</p>
<p>作用域和生命周期是从两个不同的角度：<strong>时间和空间</strong>对变量进行描述。</p>
<p>作用域，即是该变量<strong>可被引用的范围</strong>；</p>
<p>生命周期即是该变量<strong>从初始化到销毁的时间</strong>；</p>
<p><strong>一个程序的内存分为代码区、全局数据区、堆区、栈区，不同的内存区域，对应不同的生命周期</strong>。</p>
<blockquote>
<p><strong>全局变量</strong></p>
</blockquote>
<ul>
<li>作用域：全局作用域（全局变量只需在一个源文件中定义，就可以作用域所有源文件。）</li>
<li>生命周期：程序运行期间一直存在</li>
<li>引用方法：其他文件中使用必须用extern关键字声明引用的全局变量</li>
<li>内存分布：全局数据区</li>
<li>注意：如果在两个文件中都定义了相同名字的全局变量，连接出错：变量重定义</li>
</ul>
<blockquote>
<p><strong>全局静态变量</strong></p>
</blockquote>
<ul>
<li>作用域：文件作用域（只在被定义的文件中可见。）</li>
<li>生命周期：程序运行期间一直存在</li>
<li>内存分布：全局数据区</li>
<li>定义方法：static关键字，const关键字</li>
<li>注意：只要文件不互相包含，在两个不同的文件中是可以定义完全相同的两个静态变量的，它们彼此独立，只作用在各自文件中。</li>
</ul>
<blockquote>
<p><strong>局部静态变量</strong></p>
</blockquote>
<ul>
<li>作用域：局部作用域（只在局部作用域可见）</li>
<li>生命周期：程序运行期间一直存在</li>
<li>内存分布：全局数据区</li>
<li>定义方法：局部作用域中用static定义</li>
<li>注意：值被初始化一次，多线程中需加锁保护）</li>
</ul>
<blockquote>
<p><strong>局部变量</strong></p>
</blockquote>
<ul>
<li>作用域：局部作用域（只在局部作用域可见）</li>
<li>生命周期：程序运行出局部作用域即被销毁</li>
<li>内存分布：栈区</li>
</ul>
<h2 id="函数指针与指针函数">函数指针与指针函数</h2>
<p>边学变写   无效！</p>
<p>先不写了，等我看了书有收获有想法再写—</p>
]]></content>
      <tags>
        <tag>C++</tag>
        <tag>编程</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言数据类型</title>
    <url>/2022/03/06/C%E8%AF%AD%E8%A8%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1>数据类型</h1>
<p>**原码：**原码表示法在数值前面前面有一位符号位（即最高位为符号位），<a href="http://baike.baidu.com/view/71505.htm">正数</a>该位为0，负数该位为1（0有两种表示：+0和-0），其余位表示数值的大小。</p>
<p>**反码：**正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外</p>
<p>**补码：**计算机用反码计算时存在-0问题，所以诞生了补码</p>
<p><strong>补码计算</strong>：正数和+0的补码是其原码；负数则先计算其反码，然后反码加上1，得到补码；补码减掉1，得到反码，再将反码取反，得到原码。</p>
<span id="more"></span>
<p>8位二进制取值范围是(-2^7)～(２^7-1)，即-128～127。</p>
<p>由于补码=10000000具有特殊性，计算机在编写底层算法时，将其规定为该取值范围中的最小数-128，其值与(-1)+(-127)的计算结果正好符合。</p>
<p>8位二进制补码1000 0000没有对应的反码和原码，其他位数的二进制补码与此类似。</p>
<ol>
<li><strong>字符和整形变量</strong></li>
</ol>
<p>数据类型的本质就是为了合理利用内存空间</p>
<p>字节：1B==8位b（二进制）</p>
<p>1b只能存放0或1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof (ch)=%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch));<span class="comment">//1字节</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof(num)=d%\n&quot;</span>, <span class="keyword">sizeof</span>(num));<span class="comment">//4字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<ol start="2">
<li><strong>指针变量</strong></li>
</ol>
<p>硬盘——内存——CPU</p>
<p>内存是CPU和硬盘的桥梁</p>
<p>内存地址：内存编号，内存中每一个字节分配一个号码，就是内存编号</p>
<p>指针变量：存放上面的号码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line">	<span class="comment">//取变量地址   用&amp;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;num);<span class="comment">//num变量空间4字节，取到的是变量num的起始地址，第一字节地址</span></span><br><span class="line">	<span class="comment">//需求   定义一个指针变量保存num的地址</span></span><br><span class="line">	<span class="type">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//定义时：*说明p是指针变量   int *整体定义p是一个整数指针类型！</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof(p)=%d\n&quot;</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">	p = &amp;num;<span class="comment">//p指向了num变量空间的首地址，于是通过p可以找到num变量</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p=%d\n&quot;</span>, *p);</span><br><span class="line">	<span class="comment">//使用中：*表示取p变量指向的地址空间的内容（间接地取到变量num的值）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00AFFCE4</span><br><span class="line">sizeof(p)=4</span><br><span class="line">*p=100</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>
<hr>
<p>test03</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test03</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//指针变量的两种类型：自身类型   指向类型</span></span><br><span class="line">	<span class="comment">//自身类型：在指针变量定义的时候，除去变量名剩下的就是该指针变量的的类型</span></span><br><span class="line">		<span class="comment">//指针变量p自身类型就是int *</span></span><br><span class="line">	<span class="comment">//指向类型：在指针变量定义时，除去*p剩下的就是该指针变量合法的指向类型</span></span><br><span class="line">		<span class="comment">//指针变量p的指向类型就是int，所以只能合法地指向int类型的变量</span></span><br><span class="line">	<span class="comment">//指向类型决定了   指针变量所取空间内容的宽度 决定了指针变量+1跳过的</span></span><br><span class="line">	p = &amp;num;</span><br><span class="line">	<span class="comment">//指针变量的跨度</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&amp;num=%u\n&quot;</span>, &amp;num);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p=%u\n&quot;</span>, p);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p+1=%u\n&quot;</span>, p + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p=%d\n&quot;</span>, *p);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> *p1 = &amp;num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p1=%u\n&quot;</span>, p1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p1+1=%u\n&quot;</span>, p1 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;num=16448116</span><br><span class="line">p=16448116</span><br><span class="line">p+1=16448120</span><br><span class="line">*p=10</span><br><span class="line">p1=16448116</span><br><span class="line">p1+1=16448117</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>
<hr>
<p>testmy01</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testmy01() </span><br><span class="line">&#123;</span><br><span class="line">	int num = 1021;</span><br><span class="line">	int *p = NULL;</span><br><span class="line">	p = &amp;num;</span><br><span class="line">	printf(&quot;&amp;num=%u\n&quot;, &amp;num);</span><br><span class="line">	printf(&quot;p=%u\n&quot;, p);</span><br><span class="line">	printf(&quot;*p=%d\n&quot;, *p);</span><br><span class="line"></span><br><span class="line">	char *p1 = &amp;num;//p1步长是一个字节</span><br><span class="line"></span><br><span class="line">	printf(&quot;p1=%u\n&quot;, p1);</span><br><span class="line">	printf(&quot;*p1=%d\n&quot;, *p1);</span><br><span class="line"></span><br><span class="line">	p1 += 1;</span><br><span class="line">	printf(&quot;p1=%u\n&quot;, p1);</span><br><span class="line">	printf(&quot;*p1=%d\n&quot;, *p1);</span><br><span class="line"></span><br><span class="line">	p1 += 1;</span><br><span class="line">	printf(&quot;p1=%u\n&quot;, p1);</span><br><span class="line">	printf(&quot;*p1=%d\n&quot;, *p1);</span><br><span class="line"></span><br><span class="line">	p1 += 1;</span><br><span class="line">	printf(&quot;p1=%u\n&quot;, p1);</span><br><span class="line">	printf(&quot;*p1=%d\n&quot;, *p1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;num=5503868</span><br><span class="line">p=5503868</span><br><span class="line">*p=1021</span><br><span class="line">p1=5503868</span><br><span class="line">*p1=-3</span><br><span class="line">p1=5503869</span><br><span class="line">*p1=3</span><br><span class="line">p1=5503870</span><br><span class="line">*p1=0</span><br><span class="line">p1=5503871</span><br><span class="line">*p1=0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>
<p><strong>我不李姐</strong></p>
<hr>
<p>test04</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test04</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">0x12020304</span>;<span class="comment">//赋值十六进制</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> *p1 = &amp;num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p1=%#x\n&quot;</span>, *p1);<span class="comment">//输出十六进制</span></span><br><span class="line"></span><br><span class="line">	<span class="type">short</span> *p2 = &amp;num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p2=%#x\n&quot;</span>, *p2);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> *p3 = &amp;num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p3=%#x\n&quot;</span>, *p3);</span><br><span class="line"></span><br><span class="line">	<span class="type">short</span> *p4 = &amp;num;</span><br><span class="line">	p4 += <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p4=%#x\n&quot;</span>, *p4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*p1=0x12020304</span><br><span class="line">*p2=0x304</span><br><span class="line">*p3=0x4</span><br><span class="line">*p4=0x1202</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>C</tag>
        <tag>编程</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客图片显示问题解决方案（亲测有效）</title>
    <url>/2022/03/03/Hexo%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/</url>
    <content><![CDATA[<h1>问题描述</h1>
<p>按照教程搭载好博客，并且部署到远端，全文本格式的md都使用正常。但是带图片的博客却无法正常显示图片。</p>
<span id="more"></span>
<h1>解决方法1</h1>
<p>参考官方文档：<a href="https://hexo.io/zh-cn/docs/asset-folders.html">资源文件夹 | Hexo</a></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BAHexo%E5%AE%98%E6%96%B9%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png" alt=""></p>
<p>按照图片最下面修改了hexo根目录下的_config.yml文件夹就成功了。</p>
<p><code>post_asset_folder: true</code><br>
<code>marked:</code><br>
<code>  prependRoot: true</code>s<br>
<code>  postAsset: true</code></p>
<p>图片插入格式<code>![](image.png)</code></p>
<h1>解决方法2</h1>
<p>在Hexo的目录source中创建一个图片文件夹，例如pic</p>
<p>把你要插入的图片文件放到该目录下面，在你的文章中正常使用markdown的语法插入图片即可</p>
<p>例如<code>![img](/pic/xxx.png)</code></p>
<p>到此你就完成了插图，并且图片在你的博客上面也会正常显示！</p>
<p>记住在pic前面有一个/，表示根目录的意思，因为对于hexo来说它的资源文件的根目录就是source,当然你也可以修改_config.yml改变这个配置</p>
<p>原文链接：<a href="https://blog.csdn.net/as3522/article/details/102972473">https://blog.csdn.net/as3522/article/details/102972473</a></p>
<h1>解决方法3</h1>
<p>把图片全部保存到云端，推荐使用GitHub+PicGo图床，参见文章   <strong>PicGo图床功能测试</strong></p>
<p><a href="https://sweeryehe.github.io/2022/03/05/PicGo%E5%9B%BE%E5%BA%8A%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/">PicGo图床功能测试 | SweerYeHe</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2022/03/02/Test/</url>
    <content><![CDATA[<h1>测试一下</h1>
<p>看看图片功能</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/test%E6%9C%AC%E5%9C%B0%E5%9B%BE.jpg" alt=""></p>
<span id="more"></span>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E7%BD%91%E5%9B%BE20220305210337.png" alt=""></p>
<p><a href="https://blog.csdn.net/as3522/article/details/102972473?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=1">(20条消息) Hexo不显示图片,不需要插件,超简单_as3522的博客-CSDN博客_hexo 图片插件</a></p>
<p>根据这位大佬的第二种方法终于在本地加载出本地的图片了</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E7%BD%91%E5%9B%BE20220305210337.png" alt=""></p>
<p>网图也在本地端口成功加载出来了！！！</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E6%9C%AC%E5%9C%B0%E5%9B%BE%E6%B5%8B%E8%AF%95%E6%88%90%E5%8A%9F.png" alt="本地图测试成功"></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%A4%A7%E4%BD%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E6%9C%AC%E5%9C%B0%E5%9B%BE.jpg" alt=""></p>
<h1>显示情况</h1>
<p>网图在markdown文件和本地端口、远程端口都能正常显示！</p>
<p>本地图片通过这种格式可以在本地和远端正常显示。md显示异常。</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E6%9C%AC%E5%9C%B0%E5%9B%BE20220303082723263.png" alt=""></p>
]]></content>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法</title>
    <url>/2022/03/04/MarkDown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1>MarkDown简介</h1>
<p>Markdown是一种<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/52671915">轻量级标记语言</a>，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的<a href="https://baike.baidu.com/item/%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/9862288">纯文本格式</a>编写文档，然后转换成有效的<a href="https://baike.baidu.com/item/XHTML/316621">XHTML</a>（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>
<p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。 如<a href="https://baike.baidu.com/item/GitHub/10145341">GitHub</a>、<a href="https://baike.baidu.com/item/Reddit/1272010">Reddit</a>、<a href="https://baike.baidu.com/item/Diaspora/10726893">Diaspora</a>、[Stack Exchange](<a href="https://baike.baidu.com/item/Stack">https://baike.baidu.com/item/Stack</a> Exchange/13777796)、<a href="https://baike.baidu.com/item/OpenStreetMap/3171606">OpenStreetMap</a> 、<a href="https://baike.baidu.com/item/SourceForge/6562141">SourceForge</a>、<a href="https://baike.baidu.com/item/%E7%AE%80%E4%B9%A6/5782216">简书</a>、<a href="https://www.yuque.com/dashboard">工作台 · 语雀 (yuque.com)</a>、印象笔记等，甚至还能被使用来撰写<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E4%B9%A6/346054">电子书</a>。</p>
<p>**优点：**操作简单，纯文本格式，在哪里效果都一样，真正的所想即所得。尤其在列表和表格那块再也不用担心乱码了！word杀我。</p>
<h1>语法</h1>
<p>这篇文章只介绍MarkDown语法。实际在各编辑工具中使用时会略有不同。下篇文章介绍使用Typora基于MarkDown语法写文章！</p>
<span id="more"></span>
<h2 id="一、标题">一、标题</h2>
<p>在想要设置为标题的文字前面加#来表示<br>
一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<h1>这是一级标题</h1>
<h2 id="这是二级标题">这是二级标题</h2>
<h3 id="这是三级标题">这是三级标题</h3>
<h4 id="这是四级标题">这是四级标题</h4>
<h5 id="这是五级标题">这是五级标题</h5>
<h6 id="这是六级标题">这是六级标题</h6>
<hr>
<h1>二、字体</h1>
<ul>
<li>
<h5 id="加粗">加粗</h5>
</li>
</ul>
<p>要加粗的文字左右分别用两个*号包起来</p>
<ul>
<li>
<h5 id="斜体">斜体</h5>
</li>
</ul>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<ul>
<li>
<h5 id="斜体加粗">斜体加粗</h5>
</li>
</ul>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<ul>
<li>
<h5 id="删除线">删除线</h5>
</li>
</ul>
<p>要加删除线的文字左右分别用两个~~号包起来</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><strong>这是加粗的文字</strong><br>
<em>这是倾斜的文字</em><br>
<em><strong>这是斜体加粗的文字</strong></em><br>
<s>这是加删除线的文字</s></p>
<hr>
<h1>三、引用</h1>
<p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>
n个…<br>
貌似可以一直加下去，字体会逐级放大。</p>
<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
<h1>四、分割线</h1>
<p>三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>
<p>效果如下：<br>
可以看到，显示效果是一样的。</p>
<hr>
<hr>
<hr>
<hr>
<h1>五、图片</h1>
<p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 <span class="string">&quot;图片title&quot;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">![blockchain](https:<span class="comment">//ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span></span><br><span class="line">u=<span class="number">702257389</span>,<span class="number">1274025419</span>&amp;fm=<span class="number">27</span>&amp;gp=<span class="number">0.</span>jpg <span class="string">&quot;区块链&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/webp.png" alt=""></p>
<p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p>
<p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用<strong>图床</strong>，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p>
<h1>六、超链接</h1>
<p>语法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">&quot;title&quot;</span>)</span><br><span class="line">title可加可不加，加了鼠标进过时会显示title的内容</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[简书](http:<span class="comment">//jianshu.com)</span></span><br><span class="line">[百度](http:<span class="comment">//baidu.com)</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b">简书</a><br>
<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fbaidu.com">百度</a></p>
<hr>
<h1>七、列表</h1>
<h5 id="无序列表">无序列表</h5>
<p>语法：<br>
无序列表用 - + * 任何一种都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<h5 id="有序列表">有序列表</h5>
<p>语法：<br>
数字加点加<strong>空格</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h5 id="列表嵌套">列表嵌套</h5>
<p><strong>上一级和下一级之间加3个空格即可</strong></p>
<ul>
<li>一级无序列表内容
<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级无序列表内容
<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ul>
<ol>
<li>一级有序列表内容
<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级有序列表内容
<ol>
<li>二级有序列表内容
<ol>
<li>三级有序内容</li>
<li>三级有序内容</li>
</ol>
</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ol>
<hr>
<h1>八、表格</h1>
<p>语法：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">表头<span class="params">|表头|</span>表头</span><br><span class="line">---<span class="params">|:--:|</span>---:</span><br><span class="line">内容<span class="params">|内容|</span>内容</span><br><span class="line">内容<span class="params">|内容|</span>内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 <span class="params">| 包起来。此处省略</span></span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="params">|姓名|</span>技能<span class="params">|排行|</span></span><br><span class="line"><span class="params">|--|</span><span class="symbol">:--</span><span class="symbol">:|--</span><span class="symbol">:|</span></span><br><span class="line"><span class="params">|刘备|</span>哭<span class="params">|大哥|</span></span><br><span class="line"><span class="params">|关羽|</span>打<span class="params">|二哥|</span></span><br><span class="line"><span class="params">|张飞|</span>骂<span class="params">|三弟|</span></span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th style="text-align:center">技能</th>
<th style="text-align:right">排行</th>
</tr>
</thead>
<tbody>
<tr>
<td>刘备</td>
<td style="text-align:center">哭</td>
<td style="text-align:right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td style="text-align:center">打</td>
<td style="text-align:right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td style="text-align:center">骂</td>
<td style="text-align:right">三弟</td>
</tr>
</tbody>
</table>
<h1>九、代码</h1>
<p>语法：<br>
单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`代码内容`</span></span><br></pre></td></tr></table></figure>
<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">(<span class="string">``</span><span class="string">`)</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">(`</span><span class="string">``</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
</blockquote>
<p>示例：</p>
<p>单行代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`create database hero;`</span></span><br></pre></td></tr></table></figure>
<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">         echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>单行代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database hero;</span><br></pre></td></tr></table></figure>
<ul>
<li>代码块</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">  echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>
<h1>十、流程图</h1>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```flow   按回车(enter键)</span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes <span class="keyword">or</span> No?</span><br><span class="line">e=&gt;end</span><br><span class="line">    </span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"><span class="title function_ invoke__">cond</span>(no)-&gt;op</span><br><span class="line"><span class="title function_ invoke__">cond</span>(yes)-&gt;e   </span><br><span class="line">&amp;```</span><br></pre></td></tr></table></figure>
<blockquote>
<p>先是用=&gt;定义start、operation、condition、end的代号分别对应不同的框样式；然后用-&gt;定义路径。</p>
</blockquote>
<p>参考链接：<a href="https://www.jianshu.com/p/191d1e21f7ed">https://www.jianshu.com/p/191d1e21f7ed</a></p>
]]></content>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Hexo博客部署到GitHub上（2022）</title>
    <url>/2022/03/03/%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%E4%B8%8A%EF%BC%882022%EF%BC%89/</url>
    <content><![CDATA[<h1>参照官网的文档进行安装和部署</h1>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<blockquote>
<p><strong>hexo官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></strong></p>
</blockquote>
<blockquote>
<p><strong>官方文档教你在mac/windows/Linux上搭建hexo博客：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></strong></p>
</blockquote>
<h1>主要步骤</h1>
<p>安装git，安装NodeJS长期版，安装hexo， 注册GitHub并创建一个特殊仓库（命名相同）</p>
<span id="more"></span>
<h1>详细教程</h1>
<h2 id="安装Git，直接去官网安装">安装Git，直接去官网安装</h2>
<blockquote>
<p><strong><a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></strong></p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85Git.png" alt=""></p>
<h2 id="安装nodejs，直接去官网安装">安装nodejs，直接去官网安装</h2>
<blockquote>
<p><strong><a href="https://nodejs.org/">https://nodejs.org/</a></strong></p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E4%B8%8B%E8%BD%BDnodejs%E9%95%BF%E6%9C%9F%E9%80%82%E7%94%A8%E7%89%88.png" alt=""></p>
<p>打开cmd命令流窗口</p>
<p><code>npm -v  </code></p>
<p>查看npm的版本号</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E6%8A%A5%E9%94%99.png" alt=""></p>
<p>结果失败了，提示npm版本太低</p>
<p>根据提示先升级一下npm到8.5.2版本</p>
<blockquote>
<p>npm： NodeJS的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/npm%E6%9B%B4%E6%96%B0.png" alt=""></p>
<h2 id="用cnpm安装HEXO博客框架">用cnpm安装HEXO博客框架</h2>
<p>利用npm来安装cnpm（因为cnpm比较快！指向淘宝的镜像源）</p>
<p><code>npm install -g cnpm --registry.npm.taobao.org</code></p>
<p><code>cnpm install -g hexo-cli</code></p>
<h2 id="用HEXO搭建博客">用HEXO搭建博客</h2>
<p>新建一个空文件夹不妨叫blog（我怎么知道的呢？我一开始直接敲完，然后j警告提示要建一个空的folder）</p>
<p><code>hexo init</code></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%88%9D%E5%A7%8B%E5%8C%96hexo%E5%8D%9A%E5%AE%A2.png" alt="初始化hexo博客"></p>
<p>安装完成了</p>
<p>提示start blogging with hexo！（开心！！）</p>
<h2 id="启动Hexo">启动Hexo</h2>
<p>首先命令窗口进入到hexo根目录</p>
<p><code>cd e:</code></p>
<p><code>cd holder/blog</code></p>
<p>输入：</p>
<p><code>hexo s</code></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%90%AF%E5%8A%A8hexo.png" alt=""></p>
<p>显示如图说明在本地localhost:4000端口顺利启动了</p>
<p>在网页输入这个端口地址就可以看到刚建起来的个人blog了！可以看到里面初始化生成了一篇HelloWorld的博客，里面介绍了hexo的一些指令。</p>
<h2 id="写下第一篇Blog">写下第一篇Blog</h2>
<p>然后你可以创建你自己的第一篇blog了</p>
<p>命令窗口进入hexo根目录然后输入：</p>
<p><code>hexo new &quot;我的第一篇blog&quot;</code></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%88%9B%E5%BB%BAblog.png" alt=""></p>
<p>就会创建一个名为&quot;我的第一篇blog&quot;的markdown文件（.md），往后写blog也都是用这种md格式的文档。</p>
<ul>
<li>[ ] 推荐学习一下markdown语法，用于写md文档。这是一种广受技术人员喜爱的文档格式，确实很好用，语法也很简单。编辑工具可以下载一个Typora。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E8%BD%AF%E4%BB%B6%E7%95%8C%E9%9D%A2.png" alt=""></p>
<p>然后打开hexo根目录，打开我的&quot;<a href="http://xn--blog-k84fp60vb5a.md">第一篇blog.md</a>&quot;，写完然后保存</p>
<p>后续创建博客 可以自己用vs或者其他工具写博客，注意是md文件，放到这个文件夹里就行。可以新建一个text，<a href="http://xn--eqrp6q1zedkofz8n.md">把扩展名改成.md</a></p>
<p>写好了。然后运行hexo</p>
<p><code>hexo s</code></p>
<p>进网页输入这个端口进入就是刚创建的个人博客了！</p>
<p>里面有一篇默认生成的hello word和刚刚自己创建的blog</p>
<h2 id="部署到远端">部署到远端</h2>
<p>把博客从本地部署到远端！部署到github上，让全世界人都可以查看。</p>
<h3 id="1，在github上创建一个存储库命名为：“github用户名”-“-github-io”">1，在github上创建一个存储库命名为：“github用户名”+“.github.io”</h3>
<p>命令窗口用cnpm或npm安装一个git配置工具</p>
<p><code>npm install --save hexo-deployer-git</code></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.png" alt=""></p>
<p>打开blog文件夹里的_config.yml文件，这是一个hexo的配置文件，里面可以修改title等大多数配置。</p>
<p>用vs可以打开，然后修改配置</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png" alt=""></p>
<p><strong>github似乎取消了http远程访问权限，只支持通过ssh访问了。</strong></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/hhtps%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E7%94%A8ssh%E8%AE%BF%E9%97%AE.png" alt=""></p>
<h3 id="2，将-config-fml文件的配置改了一下，把https改成了ssh公钥，branch改成了main。">2，将_config.fml文件的配置改了一下，把https改成了ssh公钥，branch改成了main。</h3>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png" alt=""></p>
<p>这些跟你的github账号有关，github现在版本建立repository branch默认都是main了。</p>
<p>ssh公钥在github主页的setting里面创建。用git连接github的仓库时就要用到的，我这里密码就是之前用git向远程push代码时创建的。</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/ssh%E5%85%AC%E9%92%A5.png" alt=""></p>
<h3 id="3，然后在命令窗口将博客部署到远端">3，然后在命令窗口将博客部署到远端</h3>
<p><code>Hexo g -f </code> (相当于hexo clean 再hexo g，清理缓存，发布网站)</p>
<p><code>Hexo d</code></p>
<p>然后就成功啦！</p>
<p><strong>成功送到远程github的仓库了</strong></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E8%BF%9C%E7%AB%AF%E8%AE%BF%E9%97%AE.png" alt=""></p>
<h2 id="问题">问题</h2>
<h4 id="每次都要输入密码很麻烦"><strong>每次都要输入密码很麻烦</strong></h4>
<p>去git bash.exe（安装完Git就会有这个工具）里配置一下你的身份 就不用每次输入github的账号密码了</p>
<p><code>git config --global user.name &quot;你的github用户名&quot;</code></p>
<hr>
<h4 id="当输入hexo-s-g发布博文并预览时出现下面的提示："><strong>当输入hexo s -g发布博文并预览时出现下面的提示：</strong></h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line x, column y:</span><br></pre></td></tr></table></figure>
<p>报错信息是提示hexo的yml配置文件</p>
<p>冒号后面少了空格，补上即可</p>
<hr>
<h4 id="有篇博客突然导致报错"><strong>有篇博客突然导致报错</strong></h4>
<p>C++这样的命名似乎允许，改名后就行了</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203211823203.png" alt=""></p>
]]></content>
      <tags>
        <tag>博客</tag>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客主题个性化设置</title>
    <url>/2022/03/20/Hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h1>next主题下载安装</h1>
<p>以后自己折腾这些东西都如果真的有兴趣的话建议自己学会查看官方文档，一般里面都有很详细的步骤，以及对一些可能会遇到的问题的解决方案，比起去网上搜的别的人的教程靠谱多了！</p>
<h2 id="安装next主题">安装next主题</h2>
<p>官方文档：<a href="https://theme-next.js.org/docs/getting-started/">开始|下一步 (theme-next.js.org)</a></p>
<p>进去github仓库复制它的ssh地址，下面代码我直接给出来了，不用进网站复制了</p>
<p><a href="https://github.com/next-theme/hexo-theme-next">next-theme/hexo-theme-next: 🎉 Elegant and powerful theme for Hexo. (github.com)</a></p>
<p>Open your terminal, change to Hexosite root directoryand clone the latest master branch of NexT theme:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ git clone git@github.com:next-theme/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="next版本更新">next版本更新</h2>
<p>Or update to the latest master branch:</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">$ cd hexo-site</span><br><span class="line">$ cd themes/next</span><br><span class="line">$ git pull origin master</span><br></pre></td></tr></table></figure>
<p>When running<code>git pull</code>, you can bypass merge conflicts (error message like**«Commit your changes or stash them before you can merge»**) by using the<code>Commit</code>,<code>Stash</code>or<code>Reset</code>commands for local changes. See<a href="https://stackoverflow.com/a/15745424/5861495">here</a>how to do it.</p>
<h1>next主题配置</h1>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/20220312213533.png" alt=""></p>
<p>按照官方文档说的，为避免后期next主题更新时发生冲突，建议使用备选配置方案：</p>
<h2 id="备选配置方案">备选配置方案</h2>
<p>我的理解其实就是为了避免theme _config文件被更新下来的新文件覆盖，造成自定义的配置信息丢失。</p>
<p><strong>官方推荐了两种解决方案：</strong></p>
<ol>
<li>在hexo根目录创建一个<code>_config.next.fml</code>的文件并在其中配置next主题，需要先把next的<code>_config.fml</code>文件复制进来，在进行个性化修改。</li>
<li>直接在hexo的<code>_config.fml</code>文件中进行hexo及next主题的配置。</li>
</ol>
<p>具体请查看文档<a href="https://theme-next.js.org/docs/getting-started/configuration.html">Configuration | NexT (them时e-next.js.org)</a></p>
<p><strong>我这里选择了第一种</strong>两个配置文件分开来还是比较清楚的吧</p>
<p>不过我猜测是要每次更新后手动，把这个配置好的_config.next.fml文件复制到next的<code>_config.fml</code>文件中去。诶  ！好像不用！因为我发现默认主题就是这样的<code>_config.landscape.yml</code>。</p>
<p><strong>如果介意这点的话那就使用第二种方案</strong></p>
<h2 id="next主题配置正式开始">next主题配置正式开始</h2>
<p>官方文档</p>
<p><a href="https://theme-next.js.org/docs/theme-settings/">配置|下一步 (theme-next.js.org)</a></p>
<p>配置了基础的一部分</p>
<p>明天继续！</p>
<h1>问题</h1>
<hr>
<h4 id="hexo头像不显示问题"><strong>hexo头像不显示问题</strong></h4>
<p>解决方案参考：</p>
<p><a href="https://blog.csdn.net/qq_32627137/article/details/108047800">(22条消息) hexo无法显示头像问题_合成大西瓜是怎么火的-CSDN博客_hexo头像显示不出来</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/444277738">之前搭建的hexo博客一直头像不显示问题如何解决 - 知乎 (zhihu.com)</a></p>
<hr>
<h4 id="左上角标题旁有一个图片加载不出来的符号">左上角标题旁有一个图片加载不出来的符号</h4>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203202037630.png" alt=""></p>
<p>还不知道怎么解决~~</p>
<hr>
<h1><strong>进阶个性化页面设计完整教程</strong></h1>
<p><a href="https://zhuanlan.zhihu.com/p/26625249/">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)</a></p>
<p>优秀博客设计</p>
<p><a href="https://www.dandyweng.com/">翁天信 · Dandy Weng 的个人网站主页</a></p>
<h4 id="图标">图标</h4>
<p>这个里面找</p>
<p><a href="https://link.segmentfault.com/?enc=%2FkBZMhGSAa%2Bbk7wjeUqdyQ%3D%3D.XXqsp2m%2B44rPjcXW9%2FQp3luG0G%2FnDea9TQ1R5CZsMTY%3D">Font Awesome</a></p>
<h4 id="安装烟花特效">安装烟花特效</h4>
<p>点击鼠标时显示烟花特效，安装： <code>npm install next-theme/hexo-next-fireworks</code></p>
<h4 id="添加流程图支持">添加流程图支持</h4>
<ol>
<li>安装：</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-filter-mermaid-diagrams</span><br><span class="line">npm i --save hexo-filter-sequence</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>在站点设置里添加：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mermaid</span>: #流程图</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  # <span class="title class_">Available</span> <span class="attr">themes</span>: <span class="keyword">default</span> | dark | forest | neutral</span><br><span class="line">  <span class="attr">theme</span>: <span class="keyword">default</span></span><br></pre></td></tr></table></figure>
<h4 id="全站搜索">全站搜索</h4>
<p>参考<a href="https://link.zhihu.com/?target=https%3A//github.com/next-theme/hexo-generator-searchdb">hexo-generator-searchdb</a>。</p>
<ol>
<li>安装：<code>npm install hexo-generator-searchdb</code> 2. 在站点设置里添加以下设置项：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">search</span>:</span><br><span class="line">  <span class="attr">path</span>: search.<span class="property">xml</span></span><br><span class="line">  <span class="attr">field</span>: post</span><br><span class="line">  <span class="attr">format</span>: html</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在主题设置里找到<code>local_search</code>，修改成如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  #auto, trigger search by changing input. manual, by pressing enter key or search button.</span><br><span class="line">  <span class="attr">trigger</span>: auto</span><br><span class="line">  <span class="attr">top_n_per_article</span>: -<span class="number">1</span> # <span class="title class_">Show</span> top n results per article, show all results by -<span class="number">1</span></span><br><span class="line">  <span class="attr">unescape</span>: <span class="literal">false</span> </span><br><span class="line">  <span class="attr">preload</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h4 id="持久化链接-没成功-点任何文章都跳到第一篇去了">持久化链接   没成功  点任何文章都跳到第一篇去了</h4>
<p>文章默认的链接是<code>http://url/2020/02/10/hello-world</code>这种类型，由<code>年/月/日/标题</code>组成。如果文章里调整过日期，链接名也会变化。而且如果标题是中文或存在特殊符号，链接可能就有问题。因此建议使用永久链接，即使更改了日期也能打开原来的链接。</p>
<ol>
<li>
<p>安装：<code>npm install hexo-abbrlink --save</code>。</p>
</li>
<li>
<p>在站点配置里修改：</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink</span>: p/:abbrlink.<span class="property">html</span></span><br><span class="line"><span class="attr">abbrlink</span>:</span><br><span class="line">  <span class="attr">alg</span>: crc32  # 算法：<span class="title function_">crc16</span>(<span class="keyword">default</span>) and crc32</span><br><span class="line">  <span class="attr">rep</span>: hex    # 进制：<span class="title function_">dec</span>(<span class="keyword">default</span>) and hex</span><br></pre></td></tr></table></figure>
<h4 id="隐藏网页底部powered-By-Hexo-强力驱动">隐藏网页底部powered By Hexo / 强力驱动</h4>
<p>打开<code>themes/next/layout/_partials/footer.njk</code>，直接删除图示<code>/**删掉</code>部分。位置如图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  &#123;%- if theme.busuanzi_count.total_views %&#125;</span><br><span class="line">    &lt;span class=&quot;post-meta-item&quot; id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">      &lt;span class=&quot;post-meta-item-icon&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;&#123;&#123; theme.busuanzi_count.total_views_icon &#125;&#125;&quot;&gt;&lt;/i&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">      &lt;span class=&quot;site-pv&quot; title=&quot;&#123;&#123; __(&#x27;footer.total_views&#x27;) &#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;</span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &#123;%- endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**删掉</span><br><span class="line">&#123;%- if theme.footer.powered %&#125;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">    &#123;%- set next_site = &#x27;https://theme-next.js.org&#x27; if theme.scheme === &#x27;Gemini&#x27; else &#x27;https://theme-next.js.org/&#x27; + theme.scheme | lower + &#x27;/&#x27; %&#125;</span><br><span class="line">    &#123;&#123;- __(&#x27;footer.powered&#x27;, next_url(&#x27;https://hexo.io&#x27;, &#x27;Hexo&#x27;) + &#x27; &amp; &#x27; + next_url(next_site, &#x27;NexT.&#x27; + theme.scheme)) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line">**/</span><br><span class="line"></span><br><span class="line">&#123;%- if theme.add_this_id %&#125;</span><br><span class="line">  &lt;div class=&quot;addthis_inline_share_toolbox&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;//s7.addthis.com/js/300/addthis_widget.js#pubid=&#123;&#123; theme.add_this_id &#125;&#125;&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123;- next_inject(&#x27;footer&#x27;) &#125;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="打赏">打赏~</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reward_settings:</span><br><span class="line">  # If true, a donate button will be displayed in every article by default.</span><br><span class="line">  enable: true</span><br><span class="line">  animation: false</span><br><span class="line">  comment: Buy me a coffee</span><br><span class="line"></span><br><span class="line">reward:</span><br><span class="line"> 　wechatpay: https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203212035541.png #图片地址</span><br><span class="line"> 　alipay: https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203212035203.png #图片地址</span><br><span class="line">  #wechatpay: /images/wechatpay.png</span><br><span class="line">  #alipay: /images/alipay.png</span><br><span class="line">  #paypal: /images/paypal.png</span><br><span class="line">  #bitcoin: /images/bitcoin.png</span><br></pre></td></tr></table></figure>
<h4 id="修改主题背景图-菜单题头颜色-透明度">修改主题背景图&amp;菜单题头颜色&amp;透明度</h4>
<p>在`E:\HOLDER\blog\source_data创建一个styles.styl文件，添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">    background-image: url(https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/20220315223840.png);</span><br><span class="line">    background-attachment: fixed;</span><br><span class="line">    background-size: 100% 100%;</span><br><span class="line">	background-repeat: repeat;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//改掉题头颜色</span><br><span class="line">.site-meta &#123;</span><br><span class="line">background:url(https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203212028337.png)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//主标题颜色</span><br><span class="line">.brand&#123;</span><br><span class="line">  color: #f5f5f5</span><br><span class="line">  &#125;</span><br><span class="line">//副标题颜色</span><br><span class="line">.site-subtitle&#123;</span><br><span class="line">  color: #f5f5f5</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//文章内部背景色，不填就是默认色    修改不透明度</span><br><span class="line">.main-inner &#123;</span><br><span class="line">	//background: #fff;</span><br><span class="line">	opacity: 0.8;</span><br><span class="line">&#125;</span><br><span class="line">//文章透明度设置</span><br><span class="line">.post-block &#123;</span><br><span class="line">  opacity: 0.9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line">.sidebar &#123;</span><br><span class="line">  background: transparent;</span><br><span class="line">  opacity: 0.9;</span><br><span class="line">&#125;</span><br><span class="line">//菜单栏的透明度设置</span><br><span class="line">.header-inner &#123;</span><br><span class="line">  background: rgba(51,51,51,0.9);</span><br><span class="line">&#125;</span><br><span class="line">//搜索框（local-search）的透明度设置</span><br><span class="line">.popup &#123;</span><br><span class="line">  opacity: 0.9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 图标颜色大小</span><br><span class="line">.fa&#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">// 菜单栏</span><br><span class="line">.fa-home&#123;</span><br><span class="line">  color: #e74c3c;</span><br><span class="line">  font-size: 15px;</span><br><span class="line">&#125;</span><br><span class="line">.fa-archive&#123;</span><br><span class="line">  color: #1abc9c;</span><br><span class="line">&#125;</span><br><span class="line">.fa-tags&#123;</span><br><span class="line">  color: orange;</span><br><span class="line">&#125;</span><br><span class="line">.fa-chalkboard&#123;</span><br><span class="line">  color: #3498db;</span><br><span class="line">&#125;</span><br><span class="line">.fa-link&#123;</span><br><span class="line">  color: #FC427B;</span><br><span class="line">&#125;</span><br><span class="line">.fa-user&#123;</span><br><span class="line">  color: #9b59b6;</span><br><span class="line">&#125;</span><br><span class="line">.fa-camera&#123;</span><br><span class="line">  color: #1abc9c;</span><br><span class="line">&#125;</span><br><span class="line">.fa-envelope&#123;</span><br><span class="line">  color: #FC427B;</span><br><span class="line">&#125;</span><br><span class="line">.fa-zhihu&#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 文章</span><br><span class="line">.fa-calendar-check&#123;</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">.fa-eye&#123;</span><br><span class="line">  color: #70a1ff;</span><br><span class="line">&#125;</span><br><span class="line">.fa-comment&#123;</span><br><span class="line">  color: #2ed573;</span><br><span class="line">&#125;</span><br><span class="line">.fa-comments&#123;</span><br><span class="line">  color: #2ed573;</span><br><span class="line">&#125;</span><br><span class="line">.fa-file-word&#123;</span><br><span class="line">  color: #273c75;</span><br><span class="line">&#125;</span><br><span class="line">.fa-clock&#123;</span><br><span class="line">  color: #ff5252;</span><br><span class="line">&#125;</span><br><span class="line">.fa-image&#123;</span><br><span class="line">  color: #FC427B;</span><br><span class="line">&#125;</span><br><span class="line">.fa-sun&#123;</span><br><span class="line">  color: orange;</span><br><span class="line">&#125;</span><br><span class="line">.fa-bookmark&#123;</span><br><span class="line">  color: #00FFFF;</span><br><span class="line">&#125;</span><br><span class="line">.fa-book&#123;</span><br><span class="line">  color: #1abc9c;</span><br><span class="line">&#125;</span><br><span class="line">.fa-images&#123;</span><br><span class="line">  color: #FF00FF;</span><br><span class="line">&#125;</span><br><span class="line">.fa-windows&#123;</span><br><span class="line">  color: #e74c3c;</span><br><span class="line">&#125;</span><br><span class="line">.fa-chrome&#123;</span><br><span class="line">  color: orange;</span><br><span class="line">&#125;</span><br><span class="line">.fa-desktop&#123;</span><br><span class="line">  color: #3498db;</span><br><span class="line">&#125;</span><br><span class="line">.fa-tools&#123;</span><br><span class="line">  color: #00FFFF;</span><br><span class="line">&#125;</span><br><span class="line">.fa-python&#123;</span><br><span class="line">  color: #3498db;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1>~~尚未亲测</h1>
<h4 id="页面底部主题信息删除">页面底部主题信息删除</h4>
<p>打开themes中的next文件夹，找到_config.yml文件，修改footer下面的配置为false即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyright:</span><br><span class="line"># -------------------------------------------------------------</span><br><span class="line"># Hexo link (Powered by Hexo).</span><br><span class="line">powered: false</span><br><span class="line"></span><br><span class="line">theme:</span><br><span class="line">  # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">  enable: false</span><br><span class="line">  # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">  version: false</span><br></pre></td></tr></table></figure>
<h4 id="页面顶部黑色线条删除">页面顶部黑色线条删除</h4>
<p>打开themes中的next文件夹，找到/source/css/_common/components/header/headerband.styl文件，删除background样式即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.headband &#123;</span><br><span class="line">  height: $headband-height;</span><br><span class="line">  background: $headband-bg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态资源压缩">静态资源压缩</h4>
<p>可以通过安装hexo-all-minifier来进行静态资源压缩，减少网络请求时候的数据包，加快网站响应速度。可以对html、css、js、images进行压缩，即把重复的代码合并，把多余的空格去掉，用算法对images进行压缩。<br>
<code>npm install hexo-all-minifier --save</code><br>
再在外层_config.yml中添加配置，可以分别对html、js、css、image进行处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> html_minifier:</span><br><span class="line">  enable: true</span><br><span class="line">  ignore_error: false</span><br><span class="line">  exclude:</span><br><span class="line"></span><br><span class="line">css_minifier:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;*.min.css&#x27;</span><br><span class="line"></span><br><span class="line">js_minifier:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;*.min.js&#x27;</span><br><span class="line"></span><br><span class="line">image_minifier:</span><br><span class="line">  enable: true</span><br><span class="line">  interlaced: false</span><br><span class="line">  multipass: false</span><br><span class="line">  optimizationLevel: 2</span><br><span class="line">  pngquant: false</span><br><span class="line">  progressive: false</span><br></pre></td></tr></table></figure>
<p>…</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT主题</tag>
      </tags>
  </entry>
  <entry>
    <title>【自然辩证法】什么是科学</title>
    <url>/2022/03/17/%E3%80%90%E8%87%AA%E7%84%B6%E8%BE%A9%E8%AF%81%E6%B3%95%E3%80%91%E4%BB%80%E4%B9%88%E6%98%AF%E7%A7%91%E5%AD%A6/</url>
    <content><![CDATA[<blockquote>
<p>主题：《什么是科学》听课笔记</p>
</blockquote>
<h1>什么是科学？</h1>
<h2 id="现代人对科学的三大误解">现代人对科学的三大误解</h2>
<ol>
<li><strong>科、技不分  以技代科</strong>
<ul>
<li>科学很容易被说成是科技，比如我国有科技部、科技政策但没有谈科学，    科学   技术  和科技是不同</li>
<li>那么分开来看科学是什么呢？就分不清了</li>
</ul>
</li>
</ol>
<span id="more"></span>
<ol>
<li><strong>以功利实用的态度看待科学</strong>
<ul>
<li>
<p>科技是第一生产力</p>
<ul>
<li>技术是<strong>生产力</strong></li>
<li>有些科学可以直接转化为技术——<strong>生产力</strong></li>
<li>有些将来可以转化为技术——<strong>潜在生产力</strong></li>
<li>将来也未必能转化为技术——比如失败的科学研究，走错的研究方向</li>
</ul>
</li>
<li>
<p>科学是否代表第一生产力值得思考</p>
<ul>
<li>不是所有民族、文化，为了自己的物质生存就必须要搞科学</li>
<li>即使在有科学的民族，科学也不是生来就扮演生产力的角色</li>
<li>西方国家19世纪以后科学才开始技术化、分科化、力量化，由此科学才真正成为生产力</li>
</ul>
</li>
</ul>
</li>
<li><strong>science这个单词</strong></li>
</ol>
<ul>
<li>
<p>最早在我国的翻译是“<strong>格致</strong>”，格物致知，表示认真的研究，获得知识。但是这个词与儒家文化混淆</p>
</li>
<li>
<p>五四时期  翻译为“<strong>赛因斯</strong>”，德先生赛先生</p>
</li>
<li>
<p>19世纪日本翻译为<strong>科学</strong></p>
</li>
</ul>
<p><strong>科学教育的中西方差异</strong></p>
<ul>
<li>
<p>中国儒家文化，做知识学问讲究通才。<strong>通天、地、人为儒者，通天地，而不通人为技者。</strong>    <strong>三通而博学</strong>    有整体意识</p>
</li>
<li>
<p>西方的science讲究分科之学，理科：数理化天地生     <strong>分科而专深</strong>。</p>
</li>
</ul>
<hr>
<h2 id="感想">----------------感想</h2>
<p>确实，到研究生阶段我意识到，对科学知识的整体把握很重要！</p>
<p>本科的通识教育还是没有到位的，过于表面了，没有理解到通识的本质。</p>
<p>作为一个本科毕业生应该对所有现代知识学问有个整体性的认识。</p>
<p><strong>博学笃志 格物明德——校训——路甬祥院长——2003</strong></p>
<p>“博学”源自《中庸》中“博学之，审问之，慎思之，明辨之，笃行之。”的首句，是希望我们的学生通过刻苦学习和实践，获得广博的知识，不仅懂得自己攻读的专业，也能跨越学科的边界涉足其它的领域；不仅有自然科学、工程技术的训练，还要有一定的社会、历史、人文、艺术的修养；不仅要有较全面又相对合理的知识结构，还要有远大的抱负和广博的胸怀，面向社会，看待人生，走向未来，在生命途中永无止息地学习和充实自己。</p>
<p>“笃志”源自《荀子·修身》中“笃志而体，君子也。”意思是具有坚定意志并能付诸实践的人，才是君子。其实路院长重视的“笃志”是有新意的，他曾讲过：“在发展我国科学技术，振兴中华的伟大实践中……要努力向钱学森、邓稼先、李四光、钱三强、吴文俊、彭加木、蒋祝英和蒋新松那样的杰出科学家学习。因为在他们身上，体现了对共产主义崇高理想的坚定信仰和对科学事业执著追求的完美统一。</p>
<p>“格物”是《大学》中八条目的首目，也是八条目的基础。它是说要想达到“治国、平天下”的最高理想，首先要做的是仔细研究探察天下的万事万物，推究它们存在变化的真实道理，只有懂得其中的“理”，才能获得丰富的知识，这样才有智慧，从而使自己的意念诚实，心志端正，不受外物诱惑而达修身。所以“格物”也就是对知识和真理的追求，与博学有异曲同工之妙。</p>
<p>“明德”是《大学》中三纲要之首纲，也是三纲要的核心和根本。它是说大学之中最高的为学之道，是要教导学生能够彰显自己心中美好的德性，时常想到上天所赋予你的天良，这样才能使人革旧从新，身体力行，处于内心清明的最高的、善的境界上。这就是做人的基本道理。这里“明德”与“笃志”亦有从善如流的相似含意。今天的“明德”最基本、最普遍的要求则是爱国主义，它应成为每一个中国人心中最虔诚的信念。</p>
<hr>
<h2 id="为什么产生这三大误解？">为什么产生这三大误解？</h2>
<p><strong>传统文化的影响</strong></p>
<ul>
<li>读书、学知识的功利性    书中自由颜如玉，书中自由黄金屋    学而优则仕</li>
<li>实用主义态度  这个课对我有什么好处有什么 用处
<ul>
<li>我们古代只有技术   没有科学    所以容易从实用角度理解科学</li>
</ul>
</li>
</ul>
<p><strong>西学东渐的历史情景影响</strong></p>
<ul>
<li>第一波文化交流   古代中国对科学不重视，倨傲自己的文化   将西方科学视为奇技淫巧  蛮夷文化</li>
<li>现代  算得上是最热爱科学的国家
<ul>
<li>中华人民共和国科普法   是其他国家没有的</li>
</ul>
</li>
<li>第二波文化交流  1840后我们遭遇了深刻的民族文化危机     中国到了几乎亡国灭种的地步  科学转化成军舰战船炮火    意识到西方科学文化的力量    <strong>洋务运动</strong>  <strong>师夷长技以制夷</strong>    学好数学物理化学  造枪造炮   <strong>学好数理化走遍天下都不怕</strong></li>
</ul>
<p><strong>西方“科学”一词的由来</strong></p>
<ul>
<li>
<p>来自日本的翻译，日本采用很多中国的汉字，但并不采用汉字本来的意思，这种术语，称为<strong>日式汉语</strong>。</p>
<ul>
<li>中国学习西方文化知识，日本是个很大的二传手</li>
<li>西方距离远</li>
<li>哲学没有那么多外语人才，翻译效率低，翻译员口述+笔录员抄写。洋务运动几十年翻译了几百部西方著作</li>
<li>日本语言开放，很多外来语，比较擅长翻译，19世纪已经有很多西方著作译成日文</li>
<li>比如  science   technology  nature  philosophy  politic economics law sociology等张口就来的词
<ul>
<li>philosophy 原意指  爱知识，表示对知识的向往    却被译成哲学</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>Science的发展</strong></p>
<p>希腊：数学+哲学 Episteme</p>
<p>中世纪拉丁语：神学+数学+哲学 Scientia</p>
<p>现代：科学 science</p>
</li>
<li>
<p><strong>William Whewell</strong>（1794-1866）</p>
</li>
</ul>
<p>提出如果认为“哲学家”一词过于宽泛、过于崇高，那么，可以仿照“ Artist ”（艺术家）生造一个词：“ Scientist ”，用作对科学家的称谓。一年后，在一篇匿名书评中， Whewell 再次提到这个建议。从此以后， Scientist 一词逐渐得到普及，成为了科学家的称谓，哲学家和科学家也最终实现了分家。</p>
<p><strong>西方科学的溯源</strong></p>
<p>追溯到19世纪——当代科学转化为技术的角度</p>
<p>追溯到16、17世纪——科学作为特殊的数理化的知识体系</p>
<p>仁爱与自由：东西方不同的人性理想</p>
<p>**人文的优先性 **   从人文的角度理解中西文化的差别</p>
<p>为什么人文的视角是最基本的视角？</p>
<p>只有了解了人文是最基本的视角，我们才能很好地在此基础上展开对科学的反思。</p>
<ul>
<li>
<p><strong>生物学上</strong>，人被分类为人科人属人种。是一种高级动物。</p>
</li>
<li>
<p><strong>精神层面上</strong>，人被描述为能够使用各种灵魂的概念，在宗教中这些灵魂被认为与神圣的力量或存在有关。</p>
</li>
<li>
<p><strong>文化人类学上</strong>，人被定义为能够使用语言、具有复杂的社会组织与科技发展的生物，尤其是能够建立团体与机构来达到互相支持与协助的目的。中国古代对人的定义是：有历史典籍，能把历史典籍当作镜子以自省的动物。</p>
</li>
</ul>
<h2 id="人作为缺失者与有死者"><strong>人作为缺失者与有死者</strong></h2>
<p><strong>人是一种优待规定的存在者</strong></p>
<ul>
<li>人是先天的优先者</li>
</ul>
<p>与其他生物不同，人并无固定的本质、本能，其后天教养在人性养成过程中占有绝对的优势。</p>
<ul>
<li>人是有死者</li>
</ul>
<p>作为有死者，人需要为自己的生提供意义辩护。人生在世，终有一死。但是，只有人在这个物种是在活着的时候就知道死是不可逃避的。</p>
<p><strong>人既然早晚必死，何必有生？生命意义何在？</strong></p>
<p>我们汉语里经常讲到的“人文”一词，其实说了两个东西，一个是“人”，一个是“文”。前者指的是理想人性。后者“文”古代通“纹”，是一个动词，表示划道道留下痕迹，基本意思是“纹饰”，之后发展为达成理想人性所采纳的教化、培养、塑造的方式。</p>
<h3 id="中国的农耕文明"><strong>中国的农耕文明</strong></h3>
<p>指由农民在长期农业生产中形成的一种适应农业生产、生活需要的国家制度、礼俗制度、文化教育等的文化集合。</p>
<p><strong>农业革命</strong></p>
<p>约发生于12000年前，可能由采集野生小麦发展为有意识的栽种，逐步到半定居等待收获的农耕生活方式。人类发明了农业、畜牧业。农业的产生是人类历史上的一次巨大革命。这场革命被称为第一次农业革命或新石器革命。</p>
<p><strong>农业革命的基本标志</strong></p>
<p>一、粮食生产</p>
<p>二、定居生活</p>
<p><strong>农耕文明</strong></p>
<p>它的一个基本点是安于一地、少有迁徙，定居、安居意识很强。那些离开家乡的人被描述为“流离失所、背井离乡”被认为是很不幸的。</p>
<p><strong>长城</strong></p>
<p>中国的万里长城，表达的是典型农耕社会的防御思想。</p>
<h3 id="中国血缘文化">中国<strong>血缘文化</strong></h3>
<p>血缘文化就是基于血亲关系所构建的一套血缘秩序。<strong>核心是亲情</strong>。</p>
<p><strong>亲子之爱</strong></p>
<p>就是亲生父母对待亲生子女的爱，这种爱是中国人理解人性的一个基本的出发点，这种爱是最基本的。</p>
<p>叶公语孔子曰：“吾党有直躬者,其父攘羊,而子证之。”孔子曰：“吾党之直者异于是：父为子隐，子为父隐，直在其中矣。”</p>
<p>儒家讲究差序关系：长幼，亲疏，君臣，官民，师生……</p>
<p>古代中国人的人文就够是“人礼”结构，人指人文理想，礼指文化形式。</p>
<h3 id="西方文明"><strong>西方文明</strong></h3>
<p><strong>西方文明经常被称作两希文明</strong></p>
<p>希腊文明加希伯来文明，他们共同构成了现代西方文明的两大支柱，希伯来文明就是现在的基督教文明，基督教是从希伯来文明中发展出来的。</p>
<p>无论是希腊还是希伯来他们早期都是一种迁徙的文化，迁徙成为常态。</p>
<p><strong>《圣经》</strong></p>
<p>《圣经》又名《新旧约全书》，由《旧约》《新约》组成。《旧约》一共有三十九卷，以古希伯来文（含亚兰文）写就，由犹太教教士依据犹太教的教义编纂而成。它囊括了犹太及邻近民族从公元前12世纪至公元前2世纪的人文历史资料。</p>
<h3 id="西方契约文化">西方<strong>契约文化</strong></h3>
<p>由陌生人组成的人群，不可能以血缘关系为基础来组织。相反，血缘纽带必然被淡化、边缘化，一种崭新的社会秩序的构成机制在起作用，这就是“契约”。</p>
<p>契约文化要求每个人都是独立自主的个体，要求每个人都能负起责任来，从而制订有效的契约并严格尊守。</p>
<p><strong>裴多菲《自由与爱情》</strong></p>
<p>生命诚可贵，</p>
<p>爱情价更高。</p>
<p>若为自由故，</p>
<p>二者皆可抛。</p>
<p>美国到朝鲜打仗是为了什么？</p>
<p>美国打朝鲜的国家利益是什么？</p>
<p>美国总统杜鲁门在1950年7月19日检阅入朝参战的美国空军和海军官兵时说：“这个自由的民族正在受到威胁，我们应该参战，为他们争取自由与和平”。</p>
<p><strong>美国参与朝鲜战争的含义</strong></p>
<p>1.朝鲜战争划分南朝鲜北朝鲜是二战之后的一个力量的对比的直接反应；</p>
<p>2.社会主义国家和资本主义国家的对抗。</p>
<p>希腊人自由观：<strong>理性即自由</strong></p>
<p>然而，要真正理解、领悟自由也并不是那么容易的事情。我们中国人常常把自由简单理解成不守规矩、不受约束、任意胡来，这当然是对自由的大误解。实际上，在西方历史上，在不同的历史时期，“自由”也有不完全一样的内涵。西方的普通人也容易把自由简单理解成“为所欲为”，这跟中国普通人在理解“仁爱”时容易发生偏差（比如溺爱、愚忠）是一样的。高扬自由之大旗的希腊人，是如何理解“自由”的呢？</p>
<p><strong>希腊人着眼于“知识”来理解“自由”。</strong></p>
<p>比如波普尔也有这样的说法：“通过知识获得解放”，也基本上是这个意思。正因为有这样的理解，我们常常把斯宾诺莎的说法改成“自由是对必然的认识和改造”。在这样的理解中，自由被看成是一种征服的、“为所欲为”的能力，是一种“解放”。</p>
<p>这个理解并不是希腊人的，而是现代人的。现代人信奉“知识就是力量”，或者“知识服务于力量”，因此并不把“知识”本身看成是最高的目标，而只是达成“力量”、“解放”的手段。希腊人不一样。希腊人认为知识本身就是最高的目标，获得知识就是获得自由。</p>
<p>如何理解获得知识即获得自由呢？这里涉及到希腊人对“知识”的看法。在现代汉语里，“知识”一词已经很平庸了，对什么东西知道点什么的人都可以说（关于什么东西）是有知识的。但是，希腊人的“知识”（Episteme）包含了更多的独特的意思。总的来讲，希腊人所谓知识，是确定性知识、内在性知识，不是经验知识。</p>
<p><strong>追求确定性</strong></p>
<p><strong>知识</strong></p>
<ul>
<li>
<p><strong>经验知识</strong>   知其然不知其所以然    实验~   个例</p>
</li>
<li>
<p><strong>理论知识</strong>   知其然亦知其所以然    统一  规律</p>
<ul>
<li>
<p><strong>中国式</strong>    经验概括总结、归纳一般化形成理论知识  用于经验   通过经验来检验优化（从经验中来到经验中去）    以实用为目的！</p>
</li>
<li>
<p><strong>希腊式</strong>除了经验和理论之外还有不以实用或者说没有别的目的的纯粹知识，称之为科学。</p>
</li>
</ul>
</li>
<li>
<p><strong>理性知识</strong>   自己决定自己，自己推出自己   仅为自己而存在</p>
<ul>
<li>
<p>形式逻辑   演绎数学  体系哲学</p>
</li>
<li>
<p><strong>自由的知识</strong>   为自身而存在，没有别的目的</p>
</li>
<li>
<p><strong>只有自由的知识才是确定性知识</strong>  是绝对的，很可能成为<strong>永恒正确的</strong>。</p>
</li>
<li>
<p><strong>希腊</strong>演绎的知识，内在推理，从自己推出自己，是形式的，超经验的，可能永恒正确</p>
<ul>
<li>
<p>比如：“今天下雨或不下雨”这是确定的，永恒的    |废话，说了相当于没说。</p>
</li>
<li>
<p>！！ <strong>比如数学</strong>    很多数学知识   比如解析几何  微积分这些并不依赖经验</p>
</li>
<li>
<p>几何学里面的很多公设、定理，比如点线面的定义。“两点之间可以拉一条线”。这些知识是演绎性的知识，它是<strong>自由</strong>的，没有任何目的性的一句话，它为自己而存在！</p>
</li>
<li>
<p>亚里士多德：“为知识自身而求取知识”，“我们追求它并不是为了其他效用，正如我们把一个为自己并不为他人而存在的人称为自由人一样，在各种科学中唯有这种科学才是自由的，只有它才仅是为了自身而存在”《形而上学》</p>
</li>
</ul>
</li>
<li>
<p><strong>放之四海而皆准</strong></p>
</li>
</ul>
</li>
</ul>
<p><strong>纯粹科学的非实用性、非功利性</strong></p>
<p>科学之所以是希腊人的人文，原因就在于，希腊人的科学本质上就是自由的学术。自由的学术有两个基本特征：其一，希腊科学纯粹为“自身”而存在，缺乏功利目的、实用目的；其二，希腊科学不借助外部经验，纯粹依靠内在演绎来发展“自身”。我们要深入理解希腊科学，应该在这两个方面做更多的考察和分析。</p>
<p>哲学，亚里士多德也把它看成是一切科学（知识）中最高级的，是最理想的科学形态。这种科学理想，不只在亚里士多德那里能够找到，在他以前的柏拉图、苏格拉底那里同样能够找到。</p>
<p>这种科学理想，既体现在亚里士多德开创的第一哲学（形而上学）那里，也体现在希腊人特有的科学――数学那里。在《理想国》里，柏拉图借苏格拉底之口特别强调了数学的非功利性、它的纯粹性、它对于追求真理的必要性，因为算术和几何的学习不是为做买卖，而是“迫使灵魂使用纯粹理性通向真理本身”，这门科学的真正目的是纯粹为了知识。希腊人开辟了演绎和推理的数学传统，这首先是由于他们把数学这门科学看成是培养“自由民”所必须的“自由”的学问，自由的学问是纯粹的为着自身而存在的学问，不受实利所制约。</p>
<p>希腊数学的集大成者是欧几里得的《原本》。《原本》成为西方思想最重要的经典（也许仅次于《圣经》），但其作者欧几里得的生平几乎不可考。流传下来仅有两则故事。第一则故事说，有国王师从欧几里得学习几何学，欲求捷径，欧氏回答说：“在几何学的王国里没有为国王单独铺就的康庄大道”。第二则故事则说的是，一位年轻人师从欧氏学几何，但问及几何学的用处，欧氏勃然大怒：“给他两个钱，赶紧给我走，居然想跟我学有用之学，谁不知道我的学问是完全无用的”。</p>
<p>任何知识若是仅仅为他者而存在、成为实现他者的手段和工具，那么这样的知识就不是为着“自己”的知识，因而就不是自由的知识；学习这样的知识，就不能起到教化自由人性的作用。希腊人强调为学术而学术、为知识而知识，其背景在于，他们的学术本来就是自由的学术。</p>
<p><strong>我们中国文化有很强大的“学以致用”传统，强调学术、知识本身并无内在价值，只有工具价值</strong>。“学成文武艺，货于帝王家”。读书本身不是目的，读书的价值在于“书中自有黄金屋、书中自有颜如玉”。学问“本身”没有价值，学问是敲门砖、是进身之阶，“学而优则仕”。总的来讲，中国的读书人、学者、士人并未视学术有着自身独立的价值，因而士人阶层总不是一个独立存在的阶层，总是依属他人而存在。今天人们批评中国学者缺乏“独立之思想、自由之精神”，其实这个局面的深层原因是，中国文化中缺乏“为学术而学术、为知识而知识”的精神，学以致用的传统太过强大。我们嘲笑无用的学问是“屠龙之术”，我们的学生总是问老师我们学习的东西有什么用，而我们的教师、学者也总是苦口婆心地向学生、向管理者、向科研经费的拨发者强调他们从事的学术是有用的。这个学以致用传统，严重的妨碍了我们去理解科学精神的真谛。</p>
<p>**无用的知识何以是知识呢？**希腊人的回答更加特别：一切真知识都必定是出自自身的内在性知识，来自外部经验的不算真知识（episteme），只能算意见（doxa）。什么是真知识，什么是内在性知识？这就要说到希腊科学的演绎特征。</p>
<p>我们知道，人类几个最古老的文明都积累了丰富的知识，并且产生了专职守护并传承这些知识的社会阶层（比如祭司、僧侣、文官等）。这些知识，有的事关国计，有的事关民生，但均是有用的知识，均是祖先生活智慧的结晶，均是经验知识。唯有希腊人奇花独秀，提出知识的本质是非经验的，从而发展了独具特色的演绎科学。</p>
<p>演绎科学注重内在“推理”，不重解决具体应用问题。什么是“推理”？百科全书说：“推理是使用理智从某些前提产生结论”。人们通过经验学习都可以习得从某些前提得出结论的能力。看到天上风起云涌，我们得出结论“快要下雨了”；看到大街上的人都朝一个地方奔去，我们得出结论“那地方出事了”；房间里的灯突然熄灭了，我们得出结论“停电了”。这些都是经验推理。这些推理多半是正确的，但也不一定。风云突变，甚至电闪雷鸣，也有可能不下雨；人们都朝一个地方跑，也许是抢购什么东西；灯熄灭了，也可能是灯泡坏了。但是，有些推理却必然正确，比如，“单身汉是未婚的”，“屋子外面要么下雨要么不下雨”。如此看来，推理作为知识的重要表现形式有许多种。有些推理不是必然正确，有些推理必然正确。希腊人看重的推理是内在推理、演绎推理，必然正确的推理。</p>
<p>演绎推理貌似重复一些废话，但希腊演绎科学的确提供了“新知”。<strong>希腊数学和希腊哲学的伟大成就就是明证</strong>。</p>
<h3 id="数学">数学</h3>
<p><strong>西方人学习的顺序</strong>      数学  逻辑   哲学</p>
<ul>
<li>
<p>数学<strong>mathematics</strong>源自<strong>希腊语</strong>  是<strong>能学能教</strong>的意思，属于一种形式科学。</p>
</li>
<li>
<p><strong>有些知识人本来就有</strong>，<strong>先天</strong>就具备的，只是我们后来忘了，我们只能学习哪些本来就会的知识，<strong>学习就是一种回忆</strong>。——柏拉图</p>
</li>
</ul>
<p>希腊算术与中国算术的根本区别</p>
<p>希腊算术不计算，逻辑中才计算</p>
<p>西方人一算术为代表的的数学实际上是一种非常基本的人性的教化的学问</p>
<hr>
<h2 id="人类科普">人类科普</h2>
<p><strong>人类进化两个基本趋势</strong></p>
<p>一、直立行走</p>
<p>二、人类的大脑容量越变越大</p>
<p>成年人有1450毫升的脑容量</p>
<p>初生婴儿只有700毫升的脑容量</p>
<p><strong>人类的婴儿</strong></p>
<p>人类的女性为了直立行走，其骨盆的最大宽度只能容纳300毫升脑量的胎儿娩出，因此，进行无情的宣判，人类必须早产，这种生物学意义上的早产，使得人类的婴儿有较漫长的后天学习时间。</p>
<p>正是先天的缺失，使得人类必须通过后天的努力自己创造自己，因此，人性并不是先天的，而是后天习得的，特别是，通过文化被构成的。</p>
<hr>
]]></content>
      <tags>
        <tag>读书笔记</tag>
        <tag>自然辩证法</tag>
      </tags>
  </entry>
</search>
