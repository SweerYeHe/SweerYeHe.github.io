<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我的第一篇blog</title>
    <url>/2022/03/02/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/</url>
    <content><![CDATA[<h1 id="1"><a href="#1" class="headerlink" title="1"></a>1</h1><p>搞了两三天了，还没搞好，昨天搞好了，换了个主题yilia结果头像图片显示不出来，搜索了很多解决方案，结果还是不行，有点烦了，全删了重新装了hexo。<br>烦人。</p>
<h1 id="2"><a href="#2" class="headerlink" title="2"></a>2</h1><p>原来要在#符号后面加空格才能显示小标题字体！文章总算可以显示小标题了。</p>
<h1 id="3"><a href="#3" class="headerlink" title="3"></a>3</h1><p>下一步学习在文章中放图片</p>
<h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><p>图片还是显示不出来啊！烦了！</p>
<p><img src="https://upload-images.jianshu.io/upload_images/6860761-fd2f51090a890873.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/550/format/webp" alt="我用markdown插入的第一张图片"></p>
]]></content>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>测试图片</title>
    <url>/2022/03/02/%E6%B5%8B%E8%AF%95%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<h1 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h1><p>看看图片功能</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/test%E6%9C%AC%E5%9C%B0%E5%9B%BE.jpg"></p>
<span id="more"></span>



<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E7%BD%91%E5%9B%BE20220305210337.png"></p>
<p><a href="https://blog.csdn.net/as3522/article/details/102972473?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=1">(20条消息) Hexo不显示图片,不需要插件,超简单_as3522的博客-CSDN博客_hexo 图片插件</a></p>
<p>根据这位大佬的第二种方法终于在本地加载出本地的图片了</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E7%BD%91%E5%9B%BE20220305210337.png"></p>
<p>网图也在本地端口成功加载出来了！！！</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E6%9C%AC%E5%9C%B0%E5%9B%BE%E6%B5%8B%E8%AF%95%E6%88%90%E5%8A%9F.png" alt="本地图测试成功"></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%A4%A7%E4%BD%AC%E7%9A%84%E7%AC%AC%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95%E6%9C%AC%E5%9C%B0%E5%9B%BE.jpg"></p>
<h1 id="显示情况"><a href="#显示情况" class="headerlink" title="显示情况"></a>显示情况</h1><p>网图在markdown文件和本地端口、远程端口都能正常显示！</p>
<p>本地图片通过这种格式可以在本地和远端正常显示。md显示异常。</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E6%9C%AC%E5%9C%B0%E5%9B%BE20220303082723263.png"></p>
]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>2022考古，搭建Hexo博客部署到GitHub上</title>
    <url>/2022/03/03/2022%E8%80%83%E5%8F%A4%EF%BC%8C%E6%90%AD%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%88%B0GitHub%E4%B8%8A/</url>
    <content><![CDATA[<h1>参照官网的文档进行安装和部署</h1>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<blockquote>
<p><strong>hexo官网：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a></strong></p>
</blockquote>
<blockquote>
<p><strong>官方文档教你在mac/windows/Linux上搭建hexo博客：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></strong></p>
</blockquote>
<h1>主要步骤</h1>
<p>安装git，安装NodeJS长期版，安装hexo， 注册GitHub并创建一个特殊仓库（命名相同）</p>
<span id="more"></span>
<h1>详细教程</h1>
<h2 id="安装Git，直接去官网安装">安装Git，直接去官网安装</h2>
<blockquote>
<p><strong><a href="https://git-scm.com/downloads">Git - Downloads (git-scm.com)</a></strong></p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85Git.png" alt=""></p>
<h2 id="安装nodejs，直接去官网安装">安装nodejs，直接去官网安装</h2>
<blockquote>
<p><strong><a href="https://nodejs.org/">https://nodejs.org/</a></strong></p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E4%B8%8B%E8%BD%BDnodejs%E9%95%BF%E6%9C%9F%E9%80%82%E7%94%A8%E7%89%88.png" alt=""></p>
<p>打开cmd命令流窗口</p>
<p><code>npm -v  </code></p>
<p>查看npm的版本号</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E6%8A%A5%E9%94%99.png" alt=""></p>
<p>结果失败了，提示npm版本太低</p>
<p>根据提示先升级一下npm到8.5.2版本</p>
<blockquote>
<p>npm： NodeJS的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/npm%E6%9B%B4%E6%96%B0.png" alt=""></p>
<h2 id="用cnpm安装HEXO博客框架">用cnpm安装HEXO博客框架</h2>
<p>利用npm来安装cnpm（因为cnpm比较快！指向淘宝的镜像源）</p>
<p><code>npm install -g cnpm --registry.npm.taobao.org</code></p>
<p><code>cnpm install -g hexo-cli</code></p>
<h2 id="用HEXO搭建博客">用HEXO搭建博客</h2>
<p>新建一个空文件夹不妨叫blog（我怎么知道的呢？我一开始直接敲完，然后j警告提示要建一个空的folder）</p>
<p><code>hexo init</code></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%88%9D%E5%A7%8B%E5%8C%96hexo%E5%8D%9A%E5%AE%A2.png" alt="初始化hexo博客"></p>
<p>安装完成了</p>
<p>提示start blogging with hexo！（开心！！）</p>
<h2 id="启动Hexo">启动Hexo</h2>
<p>首先命令窗口进入到hexo根目录</p>
<p><code>cd e:</code></p>
<p><code>cd holder/blog</code></p>
<p>输入：</p>
<p><code>hexo s</code></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%90%AF%E5%8A%A8hexo.png" alt=""></p>
<p>显示如图说明在本地localhost:4000端口顺利启动了</p>
<p>在网页输入这个端口地址就可以看到刚建起来的个人blog了！可以看到里面初始化生成了一篇HelloWorld的博客，里面介绍了hexo的一些指令。</p>
<h2 id="写下第一篇Blog">写下第一篇Blog</h2>
<p>然后你可以创建你自己的第一篇blog了</p>
<p>命令窗口进入hexo根目录然后输入：</p>
<p><code>hexo new &quot;我的第一篇blog&quot;</code></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%88%9B%E5%BB%BAblog.png" alt=""></p>
<p>就会创建一个名为&quot;我的第一篇blog&quot;的markdown文件（.md），往后写blog也都是用这种md格式的文档。</p>
<ul>
<li>[ ] 推荐学习一下markdown语法，用于写md文档。这是一种广受技术人员喜爱的文档格式，确实很好用，语法也很简单。编辑工具可以下载一个Typora。</li>
</ul>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E8%BD%AF%E4%BB%B6%E7%95%8C%E9%9D%A2.png" alt=""></p>
<p>然后打开hexo根目录，打开我的&quot;<a href="http://xn--blog-k84fp60vb5a.md">第一篇blog.md</a>&quot;，写完然后保存</p>
<p>后续创建博客 可以自己用vs或者其他工具写博客，注意是md文件，放到这个文件夹里就行。可以新建一个text，<a href="http://xn--eqrp6q1zedkofz8n.md">把扩展名改成.md</a></p>
<p>写好了。然后运行hexo</p>
<p><code>hexo s</code></p>
<p>进网页输入这个端口进入就是刚创建的个人博客了！</p>
<p>里面有一篇默认生成的hello word和刚刚自己创建的blog</p>
<h2 id="部署到远端">部署到远端</h2>
<p>把博客从本地部署到远端！部署到github上，让全世界人都可以查看。</p>
<h3 id="1，在github上创建一个存储库命名为：“github用户名”-“-github-io”">1，在github上创建一个存储库命名为：“github用户名”+“.github.io”</h3>
<p>命令窗口用cnpm或npm安装一个git配置工具</p>
<p><code>npm install --save hexo-deployer-git</code></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%AE%89%E8%A3%85%E6%8F%92%E4%BB%B6.png" alt=""></p>
<p>打开blog文件夹里的_config.yml文件，这是一个hexo的配置文件，里面可以修改title等大多数配置。</p>
<p>用vs可以打开，然后修改配置</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png" alt=""></p>
<p><strong>github似乎取消了http远程访问权限，只支持通过ssh访问了。</strong></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/hhtps%E8%AE%BF%E9%97%AE%E5%A4%B1%E8%B4%A5.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E7%94%A8ssh%E8%AE%BF%E9%97%AE.png" alt=""></p>
<h3 id="2，将-config-fml文件的配置改了一下，把https改成了ssh公钥，branch改成了main。">2，将_config.fml文件的配置改了一下，把https改成了ssh公钥，branch改成了main。</h3>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E4%BF%AE%E6%94%B9%E9%85%8D%E7%BD%AE.png" alt=""></p>
<p>这些跟你的github账号有关，github现在版本建立repository branch默认都是main了。</p>
<p>ssh公钥在github主页的setting里面创建。用git连接github的仓库时就要用到的，我这里密码就是之前用git向远程push代码时创建的。</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/ssh%E5%85%AC%E9%92%A5.png" alt=""></p>
<h3 id="3，然后在命令窗口将博客部署到远端">3，然后在命令窗口将博客部署到远端</h3>
<p><code>Hexo g -f </code> (相当于hexo clean 再hexo g，清理缓存，发布网站)</p>
<p><code>Hexo d</code></p>
<p>然后就成功啦！</p>
<p><strong>成功送到远程github的仓库了</strong></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E8%BF%9C%E7%AB%AF%E8%AE%BF%E9%97%AE.png" alt=""></p>
<h2 id="问题">问题</h2>
<h4 id="每次都要输入密码很麻烦"><strong>每次都要输入密码很麻烦</strong></h4>
<p>去git bash.exe（安装完Git就会有这个工具）里配置一下你的身份 就不用每次输入github的账号密码了</p>
<p><code>git config --global user.name &quot;你的github用户名&quot;</code></p>
<hr>
<p>当输入hexo s -g发布博文并预览时出现下面的提示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YAMLException: can not read a block mapping entry; a multiline key may not be an implicit key at line x, column y:</span><br></pre></td></tr></table></figure>
<p>报错信息是提示hexo的yml配置文件</p>
<p>冒号后面少了空格，补上即可</p>
<hr>
<h4 id="hexo头像不显示问题"><strong>hexo头像不显示问题</strong></h4>
<p>解决方案参考：</p>
<p><a href="https://blog.csdn.net/qq_32627137/article/details/108047800">(22条消息) hexo无法显示头像问题_合成大西瓜是怎么火的-CSDN博客_hexo头像显示不出来</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/444277738">之前搭建的hexo博客一直头像不显示问题如何解决 - 知乎 (zhihu.com)</a></p>
<hr>
<h4 id="进阶个性化页面设计完整教程"><strong>进阶个性化页面设计完整教程</strong></h4>
<p><a href="https://zhuanlan.zhihu.com/p/26625249/">GitHub+Hexo 搭建个人网站详细教程 - 知乎 (zhihu.com)</a></p>
<p>优秀博客设计</p>
<p><a href="https://www.dandyweng.com/">翁天信 · Dandy Weng 的个人网站主页</a></p>
<h4 id="图标">图标</h4>
<p>这个里面找</p>
<p><a href="https://link.segmentfault.com/?enc=%2FkBZMhGSAa%2Bbk7wjeUqdyQ%3D%3D.XXqsp2m%2B44rPjcXW9%2FQp3luG0G%2FnDea9TQ1R5CZsMTY%3D">Font Awesome</a></p>
<h3 id="安装烟花特效">安装烟花特效</h3>
<p>点击鼠标时显示烟花特效，安装： <code>npm install next-theme/hexo-next-fireworks</code></p>
<h3 id="添加流程图支持">添加流程图支持</h3>
<p>\1. 安装：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-filter-mermaid-diagrams</span><br><span class="line">npm i --save hexo-filter-sequence</span><br></pre></td></tr></table></figure>
<p>\2. 在站点设置里添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">mermaid</span>: #流程图</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  # <span class="title class_">Available</span> <span class="attr">themes</span>: <span class="keyword">default</span> | dark | forest | neutral</span><br><span class="line">  <span class="attr">theme</span>: <span class="keyword">default</span></span><br></pre></td></tr></table></figure>
<h3 id="全站搜索">全站搜索</h3>
<p>参考<a href="https://link.zhihu.com/?target=https%3A//github.com/next-theme/hexo-generator-searchdb">hexo-generator-searchdb</a>。</p>
<p>\1. 安装：<code>npm install hexo-generator-searchdb</code> 2. 在站点设置里添加以下设置项：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">search</span>:</span><br><span class="line">  <span class="attr">path</span>: search.<span class="property">xml</span></span><br><span class="line">  <span class="attr">field</span>: post</span><br><span class="line">  <span class="attr">format</span>: html</span><br><span class="line">  <span class="attr">limit</span>: <span class="number">10000</span></span><br></pre></td></tr></table></figure>
<ol>
<li>在主题设置里找到<code>local_search</code>，修改成如下：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  #auto, trigger search by changing input. manual, by pressing enter key or search button.</span><br><span class="line">  <span class="attr">trigger</span>: auto</span><br><span class="line">  <span class="attr">top_n_per_article</span>: -<span class="number">1</span> # <span class="title class_">Show</span> top n results per article, show all results by -<span class="number">1</span></span><br><span class="line">  <span class="attr">unescape</span>: <span class="literal">false</span> </span><br><span class="line">  <span class="attr">preload</span>: <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="持久化连接-没成功-点任何文章都跳到第一篇去了">持久化连接   没成功  点任何文章都跳到第一篇去了</h3>
<p>文章默认的链接是<code>http://url/2020/02/10/hello-world</code>这种类型，由<code>年/月/日/标题</code>组成。如果文章里调整过日期，链接名也会变化。而且如果标题是中文或存在特殊符号，链接可能就有问题。因此建议使用永久链接，即使更改了日期也能打开原来的链接。</p>
<p>\1. 安装：<code>npm install hexo-abbrlink --save</code>。</p>
<p>\2. 在站点配置里修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink</span>: p/:abbrlink.<span class="property">html</span></span><br><span class="line"><span class="attr">abbrlink</span>:</span><br><span class="line">  <span class="attr">alg</span>: crc32  # 算法：<span class="title function_">crc16</span>(<span class="keyword">default</span>) and crc32</span><br><span class="line">  <span class="attr">rep</span>: hex    # 进制：<span class="title function_">dec</span>(<span class="keyword">default</span>) and hex</span><br></pre></td></tr></table></figure>
<h4 id="左上角标题旁有一个图片加载不出来的符号">左上角标题旁有一个图片加载不出来的符号</h4>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/202203202037630.png" alt=""></p>
<h4 id="页面底部主题信息删除">页面底部主题信息删除</h4>
<p>打开themes中的next文件夹，找到_config.yml文件，修改footer下面的配置为false即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">copyright:</span><br><span class="line"># -------------------------------------------------------------</span><br><span class="line"># Hexo link (Powered by Hexo).</span><br><span class="line">powered: false</span><br><span class="line"></span><br><span class="line">theme:</span><br><span class="line">  # Theme &amp; scheme info link (Theme - NexT.scheme).</span><br><span class="line">  enable: false</span><br><span class="line">  # Version info of NexT after scheme info (vX.X.X).</span><br><span class="line">  version: false</span><br></pre></td></tr></table></figure>
<h4 id="页面顶部黑色线条删除">页面顶部黑色线条删除</h4>
<p>打开themes中的next文件夹，找到/source/css/_common/components/header/headerband.styl文件，删除background样式即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.headband &#123;</span><br><span class="line">  height: $headband-height;</span><br><span class="line">  background: $headband-bg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="静态资源压缩">静态资源压缩</h4>
<p>可以通过安装hexo-all-minifier来进行静态资源压缩，减少网络请求时候的数据包，加快网站响应速度。可以对html、css、js、images进行压缩，即把重复的代码合并，把多余的空格去掉，用算法对images进行压缩。<br>
<code>npm install hexo-all-minifier --save</code><br>
再在外层_config.yml中添加配置，可以分别对html、js、css、image进行处理：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> html_minifier:</span><br><span class="line">  enable: true</span><br><span class="line">  ignore_error: false</span><br><span class="line">  exclude:</span><br><span class="line"></span><br><span class="line">css_minifier:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;*.min.css&#x27;</span><br><span class="line"></span><br><span class="line">js_minifier:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;*.min.js&#x27;</span><br><span class="line"></span><br><span class="line">image_minifier:</span><br><span class="line">  enable: true</span><br><span class="line">  interlaced: false</span><br><span class="line">  multipass: false</span><br><span class="line">  optimizationLevel: 2</span><br><span class="line">  pngquant: false</span><br><span class="line">  progressive: false</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Blog</tag>
        <tag>博客</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>MarkDown语法学习</title>
    <url>/2022/03/04/MarkDown%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h1 id="MarkDown简介"><a href="#MarkDown简介" class="headerlink" title="MarkDown简介"></a>MarkDown简介</h1><p>Markdown是一种<a href="https://baike.baidu.com/item/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/52671915">轻量级标记语言</a>，创始人为约翰·格鲁伯（英语：John Gruber）。 它允许人们使用易读易写的<a href="https://baike.baidu.com/item/%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F/9862288">纯文本格式</a>编写文档，然后转换成有效的<a href="https://baike.baidu.com/item/XHTML/316621">XHTML</a>（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。</p>
<p>由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。 如<a href="https://baike.baidu.com/item/GitHub/10145341">GitHub</a>、<a href="https://baike.baidu.com/item/Reddit/1272010">Reddit</a>、<a href="https://baike.baidu.com/item/Diaspora/10726893">Diaspora</a>、[Stack Exchange](<a href="https://baike.baidu.com/item/Stack">https://baike.baidu.com/item/Stack</a> Exchange&#x2F;13777796)、<a href="https://baike.baidu.com/item/OpenStreetMap/3171606">OpenStreetMap</a> 、<a href="https://baike.baidu.com/item/SourceForge/6562141">SourceForge</a>、<a href="https://baike.baidu.com/item/%E7%AE%80%E4%B9%A6/5782216">简书</a>、<a href="https://www.yuque.com/dashboard">工作台 · 语雀 (yuque.com)</a>、印象笔记等，甚至还能被使用来撰写<a href="https://baike.baidu.com/item/%E7%94%B5%E5%AD%90%E4%B9%A6/346054">电子书</a>。</p>
<p><strong>优点：</strong>操作简单，纯文本格式，在哪里效果都一样，真正的所想即所得。尤其在列表和表格那块再也不用担心乱码了！word杀我。</p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>这篇文章只介绍MarkDown语法。实际在各编辑工具中使用时会略有不同。下篇文章介绍使用Typora基于MarkDown语法写文章！</p>
<span id="more"></span>

<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示<br> 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr>
<h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li>
</ul>
<p>要加粗的文字左右分别用两个*号包起来</p>
<ul>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li>
</ul>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<ul>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li>
</ul>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<ul>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li>
</ul>
<p>要加删除线的文字左右分别用两个~~号包起来</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><strong>这是加粗的文字</strong><br> <em>这是倾斜的文字</em><br> <em><strong>这是斜体加粗的文字</strong></em><br> <del>这是加删除线的文字</del></p>
<hr>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br> n个…<br>貌似可以一直加下去，字体会逐级放大。</p>
<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
</blockquote>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p>效果如下：<br> 可以看到，显示效果是一样的。</p>
<hr>
<hr>
<hr>
<hr>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 <span class="string">&quot;图片title&quot;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">![blockchain](https:<span class="comment">//ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span></span><br><span class="line">u=<span class="number">702257389</span>,<span class="number">1274025419</span>&amp;fm=<span class="number">27</span>&amp;gp=<span class="number">0.</span>jpg <span class="string">&quot;区块链&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/webp.png"></p>
<p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p>
<p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用<strong>图床</strong>，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p>
<h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">&quot;title&quot;</span>)</span><br><span class="line">title可加可不加，加了鼠标进过时会显示title的内容</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[简书](http:<span class="comment">//jianshu.com)</span></span><br><span class="line">[百度](http:<span class="comment">//baidu.com)</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b">简书</a><br><a href="https://links.jianshu.com/go?to=http://baidu.com">百度</a></p>
<hr>
<h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：<br> 无序列表用 - + * 任何一种都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：<br> 数字加点加<strong>空格</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级和下一级之间加3个空格即可</strong></p>
<ul>
<li>一级无序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级无序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ul>
<ol>
<li>一级有序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级有序列表内容<ol>
<li>二级有序列表内容<ol>
<li>三级有序内容</li>
<li>三级有序内容</li>
</ol>
</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ol>
<hr>
<h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">表头<span class="params">|表头|</span>表头</span><br><span class="line">---<span class="params">|:--:|</span>---:</span><br><span class="line">内容<span class="params">|内容|</span>内容</span><br><span class="line">内容<span class="params">|内容|</span>内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 <span class="params">| 包起来。此处省略</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="params">|姓名|</span>技能<span class="params">|排行|</span></span><br><span class="line"><span class="params">|--|</span><span class="symbol">:--</span><span class="symbol">:|--</span><span class="symbol">:|</span></span><br><span class="line"><span class="params">|刘备|</span>哭<span class="params">|大哥|</span></span><br><span class="line"><span class="params">|关羽|</span>打<span class="params">|二哥|</span></span><br><span class="line"><span class="params">|张飞|</span>骂<span class="params">|三弟|</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th align="center">技能</th>
<th align="right">排行</th>
</tr>
</thead>
<tbody><tr>
<td>刘备</td>
<td align="center">哭</td>
<td align="right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td align="center">打</td>
<td align="right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td align="center">骂</td>
<td align="right">三弟</td>
</tr>
</tbody></table>
<h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br> 单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`代码内容`</span></span><br></pre></td></tr></table></figure>

<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">(<span class="string">``</span><span class="string">`)</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">(`</span><span class="string">``</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
</blockquote>
<p>示例：</p>
<p>单行代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`create database hero;`</span></span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">         echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li>单行代码</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database hero;</span><br></pre></td></tr></table></figure>

<ul>
<li>代码块</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">  echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>

<h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```flow   按回车(enter键)</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes <span class="keyword">or</span> No?</span><br><span class="line">e=&gt;end</span><br><span class="line">    </span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line"><span class="title function_ invoke__">cond</span>(no)-&gt;op</span><br><span class="line"><span class="title function_ invoke__">cond</span>(yes)-&gt;e   </span><br><span class="line">&amp;```</span><br></pre></td></tr></table></figure>

<blockquote>
<p>先是用&#x3D;&gt;定义start、operation、condition、end的代号分别对应不同的框样式；然后用-&gt;定义路径。</p>
</blockquote>
<p>参考链接：<a href="https://www.jianshu.com/p/191d1e21f7ed">https://www.jianshu.com/p/191d1e21f7ed</a></p>
]]></content>
      <tags>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>用Typora工具快速编写MarkDown格式的文章</title>
    <url>/2022/03/04/%E7%94%A8Typora%E5%B7%A5%E5%85%B7%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99MarkDown%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%96%87%E7%AB%A0/</url>
    <content><![CDATA[<h1 id="Typora简介"><a href="#Typora简介" class="headerlink" title="Typora简介"></a>Typora简介</h1><p>“<em>Typora是一款跨平台的Markdown编辑器软件</em>，拥有Windows、macOS客户端。Typora支持MarkDown的标准语法，同时这款软件还支持动态预览功能，一键预览。”</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E7%95%8C%E9%9D%A2.png" alt="Typora界面"></p>
<p><strong>优点：界面简洁，编写所需功能应有尽有，可以打开左侧窗口管理当前文件夹的文档、查看当前文档大纲，功能很实用，编写MarkDown文档的利器！语法敲完即刻渲染完成，并显示预览效果。集成了Word和MarkDown的优点，使用体验很棒！</strong></p>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>这篇文章介绍使用Typora基于MarkDown语法写文章！</p>
<span id="more"></span>

<p><strong>一到五和上篇文章没什么区别，可以直接跳过</strong></p>
<h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><p>在想要设置为标题的文字前面加#来表示<br> 一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<p>示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一级标题</span></span><br><span class="line"><span class="comment">## 这是二级标题</span></span><br><span class="line"><span class="comment">### 这是三级标题</span></span><br><span class="line"><span class="comment">#### 这是四级标题</span></span><br><span class="line"><span class="comment">##### 这是五级标题</span></span><br><span class="line"><span class="comment">###### 这是六级标题</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr>
<h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li>
</ul>
<p>要加粗的文字左右分别用两个*号包起来</p>
<ul>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li>
</ul>
<p>要倾斜的文字左右分别用一个*号包起来</p>
<ul>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li>
</ul>
<p>要倾斜和加粗的文字左右分别用三个*号包起来</p>
<ul>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li>
</ul>
<p>要加删除线的文字左右分别用两个~~号包起来</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><strong>这是加粗的文字</strong><br> <em>这是倾斜的文字</em><br> <em><strong>这是斜体加粗的文字</strong></em><br> <del>这是加删除线的文字</del></p>
<hr>
<h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，字体会逐级放大。</p>
<p>引用在GitHub上不好使。</p>
<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<blockquote>
<p> 这是引用的内容</p>
</blockquote>
<blockquote>
<blockquote>
<p>引用的内容</p>
</blockquote>
</blockquote>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br></pre></td></tr></table></figure>

<p>效果如下：<br> 可以看到，显示效果是一样的。</p>
<hr>
<hr>
<hr>
<hr>
<h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">![图片alt](图片地址 <span class="string">&quot;图片title&quot;</span>)</span><br><span class="line"></span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">![blockchain](https:<span class="comment">//ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/</span></span><br><span class="line">u=<span class="number">702257389</span>,<span class="number">1274025419</span>&amp;fm=<span class="number">27</span>&amp;gp=<span class="number">0.</span>jpg <span class="string">&quot;区块链&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/webp.png" alt="网图"></p>
<p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p>
<p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用<strong>图床</strong>，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。</p>
<h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[超链接名](超链接地址 <span class="string">&quot;title&quot;</span>)</span><br><span class="line">title可加可不加，加了鼠标进过时会显示title的内容</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[简书](http:<span class="comment">//jianshu.com)</span></span><br><span class="line">[百度](http:<span class="comment">//baidu.com)</span></span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b">简书</a><br><a href="https://links.jianshu.com/go?to=http://baidu.com">百度</a></p>
<hr>
<h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：<br> 无序列表用 - + * 任何一种都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ul>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ul>
<h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：<br> 数字加点加<strong>空格</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级完成后回车自动生成同级，按下backspace键后输入再次输入列表格式（- + * 或数字加空格）就行</strong></p>
<p><strong>或者直接续上一级的列表格式然后按tab键自动调整缩进到下一级</strong></p>
<ul>
<li>一级无序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级无序列表内容<ol>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ul>
<ol>
<li>一级有序列表内容<ul>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
<li>二级无序列表内容</li>
</ul>
</li>
<li>一级有序列表内容<ol>
<li>二级有序列表内容<ol>
<li>三级有序内容</li>
<li>三级有序内容</li>
</ol>
</li>
<li>二级有序列表内容</li>
<li>二级有序列表内容</li>
</ol>
</li>
</ol>
<hr>
<h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">输入表头后回车</span><br><span class="line"><span class="params">|表头|</span>表头<span class="params">|表头|</span></span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="params">|姓名|</span>技能<span class="params">|排行|</span></span><br><span class="line">    enter键</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th>技能</th>
<th>排行</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>然后输入内容即可。现在版本这里跟word一样处理，很方便了！</p>
<h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br> 单行代码：代码之间分别用一个反引号包起来</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`代码内容`</span></span><br></pre></td></tr></table></figure>

<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">(<span class="string">``</span><span class="string">`)</span></span><br><span class="line"><span class="string">enter键</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br><span class="line"><span class="string">  代码...</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
</blockquote>
<p>示例：</p>
<p>单行代码</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="string">`create database hero;`</span></span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">         echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>效果如下：</p>
<p>单行代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database hero;</span><br></pre></td></tr></table></figure>

<p>代码块</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">function <span class="function"><span class="title">fun</span><span class="params">()</span></span>&#123;</span><br><span class="line">  echo <span class="string">&quot;这是一句非常牛逼的代码&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">fun</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">```flow   </span><br><span class="line">    enter键</span><br></pre></td></tr></table></figure>

<p>就会显示这样的空模板<img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E7%A9%BA%E6%A8%A1%E6%9D%BF.png" alt="流程图空模板"></p>
<p>然后输入代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">op=&gt;operation: My Operation</span><br><span class="line">cond=&gt;condition: Yes or No?</span><br><span class="line">e=&gt;end</span><br><span class="line">    </span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(no)-&gt;op</span><br><span class="line">cond(yes)-&gt;e   </span><br></pre></td></tr></table></figure>

<blockquote>
<p>先是用&#x3D;&gt;定义start、operation、condition、end的代号分别对应不同的框样式；然后用-&gt;定义路径。</p>
</blockquote>
<p>效果如下：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E6%B5%81%E7%A8%8B%E5%9B%BE%E6%95%88%E6%9E%9C.png" alt="Typora流程图效果"></p>
<h1 id="十一、时序图"><a href="#十一、时序图" class="headerlink" title="十一、时序图"></a>十一、时序图</h1><p><strong>复现微信支付的时序图</strong></p>
<p>语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">    ……时序图代码……</span><br><span class="line">```</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    小程序 -&gt;&gt; 小程序 : wx.login()获取code</span><br><span class="line">    小程序 -&gt;&gt; + 服务器 : wx.request()发送code</span><br><span class="line">    服务器 -&gt;&gt; + 微信服务器 : code+appid+secret</span><br><span class="line">    微信服务器 --&gt;&gt; - 服务器 : openid</span><br><span class="line">    服务器 -&gt;&gt; 服务器 : 根据openid确定用户并生成token</span><br><span class="line">    服务器 --&gt;&gt; - 小程序 : token</span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E5%BE%AE%E4%BF%A1%E6%97%B6%E5%BA%8F%E5%9B%BE.png"></p>
<p>再演示一个微信支付的流程图</p>
<p>代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    title: 微信支付时序图</span><br><span class="line">    participant 微信支付用户 as user</span><br><span class="line">    participant 微信客户端 as wxc</span><br><span class="line">    participant 商户APP客户端 as appc</span><br><span class="line">    participant 商户后台系统 as apps</span><br><span class="line">    participant 微信支付系统 as wxs</span><br><span class="line"></span><br><span class="line">    user-&gt;appc:1.打开商户APP客户端()</span><br><span class="line">    appc-&gt;appc:2.选择商品下单()</span><br><span class="line">    appc-&gt;apps:3.请求生成支付订单()</span><br><span class="line">    apps-&gt;wxs:4.调用统一下单API()</span><br><span class="line">    wxs-&gt;wxs:生成预付单()</span><br><span class="line">    wxs--&gt;&gt;apps:5.返回预付单信息(prepay_id)</span><br><span class="line">    apps-&gt;apps:6.生成带签名的客户端支付信息()</span><br><span class="line">    apps--&gt;&gt;appc:7:返回信息(prepay_id,sign等)</span><br><span class="line">    user-&gt;appc:8:用户确认支付()</span><br><span class="line">    appc--&gt;wxc:9:支付参数通过调用SDK调起微信支付()</span><br><span class="line">    wxc-&gt;wxs:10.发起支付请求()</span><br><span class="line">    wxs-&gt;wxs:验证支付参数, APP支付权限等()</span><br><span class="line">    wxs--&gt;&gt;wxc:11.返回需要支付授权()</span><br><span class="line">    user-&gt;wxc:12.用户确认支付, 输入密码()</span><br><span class="line">    wxc-&gt;wxs:13:提交支付授权()</span><br><span class="line">    wxs-&gt;wxs:验证授权, 完成支付交易()</span><br><span class="line">    wxs--&gt;&gt;apps:15.异步通知商户支付结果()</span><br><span class="line">    apps-&gt;apps:接收和保存支付通知()</span><br><span class="line">    apps-&gt;&gt;wxs:16.返回告知已成功接收处理()</span><br><span class="line">    wxs--&gt;wxc:14.返回支付结果, 发送微信消息提示()</span><br><span class="line">    wxc-&gt;appc:将支付状态通过商户APP已实现的回调接口执行回调()</span><br><span class="line">    appc-&gt;apps:后台查询实际支付结果()</span><br><span class="line">    apps-&gt;wxs:调用微信查询API查询支付结果()</span><br><span class="line">    wxs--&gt;&gt;apps:返回支付结果()</span><br><span class="line">    apps--&gt;appc:返回支付结果</span><br><span class="line">    appc--&gt;user:展示支付结果()</span><br><span class="line">    appc-&gt;appc:商户发货()</span><br></pre></td></tr></table></figure>



<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="微信支付时序图"></p>
<h1 id="十二、饼图"><a href="#十二、饼图" class="headerlink" title="十二、饼图"></a><strong>十二、饼图</strong></h1><p>饼图使用 <code>pie</code> 表示，标题下面分别是区域名称及其百分比。</p>
<p>格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```mermaid</span><br><span class="line">    饼图代码</span><br></pre></td></tr></table></figure>

<p>代码：</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">pie</span><br><span class="line">    title <span class="keyword">Key</span> elements <span class="keyword">in</span> Product X</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Calcium&quot;</span> : <span class="number">42.96</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Potassium&quot;</span> : <span class="number">50.05</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Magnesium&quot;</span> : <span class="number">10.01</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;Iron&quot;</span> :  <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>效果：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/Typora%E9%A5%BC%E5%9B%BE.png"></p>
<p>参考链接1：<a href="https://www.jianshu.com/p/191d1e21f7ed">https://www.jianshu.com/p/191d1e21f7ed</a></p>
<p>参考链接2：<a href="https://www.jianshu.com/p/7fa30d7d6fd5">https://www.jianshu.com/p/7fa30d7d6fd5</a></p>
]]></content>
      <tags>
        <tag>MarkDown</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>C++基础</title>
    <url>/2022/03/06/C++%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="C-编程介绍"><a href="#C-编程介绍" class="headerlink" title="C++编程介绍"></a>C++编程介绍</h1><p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/C++%E6%A1%86%E6%9E%B6.png" alt="C++框架"></p>
<p><strong>头文件到底是个什么东西？</strong></p>
<p>头文件其实跟源文件没什么区别，都是C++的源代码</p>
<span id="more"></span>

<p><strong>因为在编译的时候头文件中的内容会被直接copy进cpp文件</strong>，但是有的时候头文件会互相包含，这可能就会造成在一份源码中copy两次同样的头文件，<strong>这也是为什么需要ifndef endif 或者#pragma once的用处</strong>。</p>
<p>头文件相互包含总会有一个文件在另一个文件中被忽略。</p>
<p>因为预处理时include<strong>是将包含的文件中的代码插入到当前代码里,文件是不能包含自己的</strong>,如果相互包含编译器只能取舍一下,否则是不可能正常通过的。如果遇到这种情况就需要<strong>对头文件进行重构，修改其包含关系</strong></p>
<p>所以头文件里<strong>最好只放变量和函数的声明</strong>，而不能放它们的定义（如果多个函数都include定义，那么就会出错了）。</p>
<p><strong>但有三个例外！</strong></p>
<p>其一，就是const&#x2F;static可以在<strong>头文件的中定义</strong>，因为const&#x2F;static默认为全局数据区，<strong>仅在当前文件有效，即使被多个文件包含也只会定义一次</strong>。</p>
<p>其二，就是内联函数的定义。内联函数和普通函数的区别<strong>在于编译阶段编译器需要知道内联函数的内部具体实现</strong>（才能够将其展开插入源代码），<strong>因此将内联函数放于头文件甚至有好处的。</strong></p>
<p>其三，就是类的定义。程序在创建一个类对象的时候，编译器只有在类定义完全可见的情况下才能够对其进行布局（如内存分配、数据成员有哪些、函数接口有哪些），且也可以将函数成员的实现也放在头文件中，<strong>因为如果函数成员在类的定义体中被定义，那么就默认这个函数是内联的。</strong></p>
<p><a href="https://www.jianshu.com/p/1bab86143f1c">GCC详解</a></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/C++%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B.png" alt="C++编译过程"></p>
<ol>
<li><strong>预处理器</strong></li>
</ol>
<p>C&#x2F;C++的预处理器其实就是一个词法（而不是语法）预处理器，<strong>其主要完成文本替换、宏展开以及删除注释</strong>等，完成这些操作之后，将会获得真正地<strong>“源代码”</strong>。</p>
<p>常见的include语句即是一个预处理器命名，在预处理器中它将所有的头文件包含进来。</p>
<p>（该步骤的文件扩展名为.i）</p>
<ol start="2">
<li><strong>编译器</strong></li>
</ol>
<p>在这一步骤，将.i文件翻译为.s，得到<strong>汇编程序语言</strong>，值得注意的是所有的编译器输出的汇编语言都是同一种语法。</p>
<p><strong>注：内联函数就是在这一环节“膨胀”进源码的</strong>，它的作用即在于：不是在调用时<strong>发生控制转</strong>移，而是在编译时将函数体<strong>嵌入在每一个调用处</strong>，适用于功能简单，<strong>规模较小又使用频繁的函数</strong>。<strong>递归函数无法内联处理，内联函数不能有循环体，switch语句，不能进行异常接口声明。仅仅省去了函数调用的开销</strong>，从而提高函数的执行效率。如果执行函数体内代码的时间，相比于函数调用的开销较大，那么效率的收获会很少。<strong>另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。</strong></p>
<ol start="3">
<li><strong>汇编器</strong></li>
</ol>
<p><strong>将</strong><strong>.s****翻译成机器语言指令</strong>，把这些指令打包成一种叫做<strong>可重定位目标程序</strong>的格式，并将结果保存在目标文件.o中(把汇编语言翻译成机器语言的过程)。</p>
<ol start="4">
<li><strong>链接器</strong>**</li>
</ol>
<p>链接的主要内容就是<strong>将各个模块之间相互引用的部分正确的衔接起来</strong>。它的工作就是把一些指令对其他符号地址的引用加以修正。<strong>链接过程主要包括了地址和空间分配、符号决议和重定向。</strong></p>
<p><strong>符号决议：</strong>有时候也被叫做符号绑定、名称绑定、名称决议、或者地址绑定，其实就是指用符号来去标识一个地址。比如说 int a &#x3D; 6;这样一句代码，用a来标识一个块4个字节大小的空间，空间里边存放的内容就是4.</p>
<p><strong>重定位：</strong>重新计算各个目标的<strong>地址</strong>过程叫做重定位。</p>
<p>gcc会到系统默认的<strong>搜索路径”&#x2F;usr&#x2F;lib”下进行查找</strong>，也就是链接到libc.so.6库函数中去。 </p>
<hr>
<p>函数库一般分为静态库和动态库两种。静态库是指编译链接时，<strong>把库文件的代码全部加入到可执行文件中，因此生成的文件比较大</strong>，<strong>但在运行时也就不再需要库文件了。</strong>其后缀名一般为”.a”。动态库与之相反，在编译链接时并没有把库文件的代码加入到可执行文件中，<strong>而是在程序执行时由运行时链接文件加载库，这样可以节省系统的开销。</strong>动态库一般后缀名为”.so”，如前面所述的libc.so.6就是动态库。<strong>gcc在编译时默认使用动态库。</strong></p>
<hr>
<p>.txt（代码段） </p>
<p>.data（全局静态已初始化变量） </p>
<p>.bss（全局未初始化变量） </p>
<p>heap（堆） </p>
<p>stack（栈）</p>
<p>内存分段见下图：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/C++%E5%86%85%E5%AD%98%E5%88%86%E6%AE%B5.png" alt="C++内存分段"></p>
<p>其中，.data用于<strong>存放初始化过的全局变量</strong>。若全局变量值为0，为了优化编译器会将它放在**.bss段**中。</p>
<p>.bss段被<strong>用来存放那些没有初始化或者初始化为0的全局变量</strong>。bss段只占运行时的内存空间而不占文件空间。在程序运行的整个周期内，.bss段的数据一直存在。</p>
<ol>
<li><p>内存栈区： 存放局部变量名； </p>
</li>
<li><p>内存堆区： 存放new或者malloc出来的对象； </p>
</li>
<li><p>常数区： <strong>存放局部变量或者全局变量的值</strong>； </p>
</li>
<li><p>静态区： <strong>用于存放全局变量或者静态变量</strong>；</p>
</li>
<li><p>代码区：二进制代码。</p>
</li>
</ol>
<p><a href="https://blog.csdn.net/jirryzhang/article/details/79518408">https://blog.csdn.net/jirryzhang/article/details/79518408</a></p>
<h1 id="C-基础知识"><a href="#C-基础知识" class="headerlink" title="C++基础知识"></a>C++基础知识</h1><h2 id="全局-x2F-局部静态变量？"><a href="#全局-x2F-局部静态变量？" class="headerlink" title="全局&#x2F;局部静态变量？"></a>全局&#x2F;局部静态变量？</h2><p><strong>静态变量都存放于全局数据区</strong>，都在程序退出时才销毁，两者唯一的区别就在于<strong>作用域不同，全局变量全局可见</strong>，<strong>而局部静态变量仅在局部区域可见</strong>。</p>
<p>作用域和生命周期是从两个不同的角度：<strong>时间和空间</strong>对变量进行描述。</p>
<p>作用域，即是该变量<strong>可被引用的范围</strong>；</p>
<p>生命周期即是该变量<strong>从初始化到销毁的时间</strong>；</p>
<p><strong>一个程序的内存分为代码区、全局数据区、堆区、栈区，不同的内存区域，对应不同的生命周期</strong>。</p>
<blockquote>
<p><strong>全局变量</strong></p>
</blockquote>
<ul>
<li>作用域：全局作用域（全局变量只需在一个源文件中定义，就可以作用域所有源文件。）</li>
<li>生命周期：程序运行期间一直存在</li>
<li>引用方法：其他文件中使用必须用extern关键字声明引用的全局变量</li>
<li>内存分布：全局数据区</li>
<li>注意：如果在两个文件中都定义了相同名字的全局变量，连接出错：变量重定义</li>
</ul>
<blockquote>
<p><strong>全局静态变量</strong></p>
</blockquote>
<ul>
<li>作用域：文件作用域（只在被定义的文件中可见。）</li>
<li>生命周期：程序运行期间一直存在</li>
<li>内存分布：全局数据区</li>
<li>定义方法：static关键字，const关键字</li>
<li>注意：只要文件不互相包含，在两个不同的文件中是可以定义完全相同的两个静态变量的，它们彼此独立，只作用在各自文件中。</li>
</ul>
<blockquote>
<p><strong>局部静态变量</strong></p>
</blockquote>
<ul>
<li>作用域：局部作用域（只在局部作用域可见）</li>
<li>生命周期：程序运行期间一直存在</li>
<li>内存分布：全局数据区</li>
<li>定义方法：局部作用域中用static定义</li>
<li>注意：值被初始化一次，多线程中需加锁保护）</li>
</ul>
<blockquote>
<p><strong>局部变量</strong></p>
</blockquote>
<ul>
<li>作用域：局部作用域（只在局部作用域可见）</li>
<li>生命周期：程序运行出局部作用域即被销毁</li>
<li>内存分布：栈区</li>
</ul>
<h2 id="函数指针与指针函数"><a href="#函数指针与指针函数" class="headerlink" title="函数指针与指针函数"></a>函数指针与指针函数</h2><p>边学变写   无效！</p>
<p>先不写了，等我看了书有收获有想法再写—</p>
]]></content>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub+PicGo图床功能测试（&amp;教程）</title>
    <url>/2022/03/05/GitHub+PicGo%E5%9B%BE%E5%BA%8A%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95%EF%BC%88&amp;%E6%95%99%E7%A8%8B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="图床测试（-amp-教程）"><a href="#图床测试（-amp-教程）" class="headerlink" title="图床测试（&amp;教程）"></a>图床测试（&amp;教程）</h1><ul>
<li><p>图床一般是指储存图片的服务器，一般写作的同学需要把图片上传到图床。</p>
</li>
<li><p>图床有免费的付费的，自己的 GitHub 当然是免费的。</p>
</li>
<li><p>这篇文章介绍如何把自己的 GitHub 当作图床，使用开源软件 PicGo ，把图片上传到 GitHub。</p>
</li>
<li><p>当然了PicGo 除了可以把 GitHub 作为图床，还可以使用其他的图床。</p>
</li>
<li><p>我的操作系统是 windows 10，我们开始吧！</p>
</li>
</ul>
<h2 id="下载-PicGo"><a href="#下载-PicGo" class="headerlink" title="下载 PicGo"></a>下载 PicGo</h2><p>官网免费下载：<a href="https://molunerfinn.com/PicGo/">PicGo (molunerfinn.com)</a></p>
<h2 id="创建存放图片的仓库"><a href="#创建存放图片的仓库" class="headerlink" title="创建存放图片的仓库"></a>创建存放图片的仓库</h2><h2 id="获取token"><a href="#获取token" class="headerlink" title="获取token"></a>获取token</h2><ol>
<li>如果从本地往仓库上传图片，需要有类似于 <strong>密钥</strong> 的东西🔑，也就是这一步获取的 <strong>token</strong>。</li>
<li>点击右上角的头像，选择 <strong>settings</strong> </li>
<li>进入设置页面，点击左侧的 <strong>Developer Settings</strong></li>
<li>进入如下的页面，选择左侧的 <strong>Personal access tokens</strong></li>
<li>接着，点击右上角的 <strong>Generate new token</strong> 按钮</li>
<li>进入新建 token 的页面，按照图片的提示完成设置，然后点击最下面的 <strong>Generate token</strong> 按钮：</li>
<li>根据自己需求选择token的有效期，可以选择无限</li>
</ol>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E8%8E%B7%E5%8F%96token.png"></p>
<p>然后页面就会显示新生成的 <strong>token</strong>，是一串数字和字母的组合，复制下来，接下来要用。</p>
<h2 id="设置PicGo"><a href="#设置PicGo" class="headerlink" title="设置PicGo"></a>设置PicGo</h2><p>打开 PicGo，点击左侧 <strong>图床设置</strong>，选择 <strong>GitHub 设置</strong>：</p>
<p>下面是我填写的示范：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">设定仓库名：就是你的GitHub用户名/仓库名</span><br><span class="line">设定分支名：写 main就行</span><br><span class="line">设定 Token：把刚刚生成的 token 填上</span><br><span class="line">指定存储路径：写成 img/ ，以后的图片都会存在 img 文件夹下，也可以写成其他路径</span><br><span class="line">设定自定义域名：这是固定的格式，https://raw.githubusercontent.com/你的用户名/你的仓库名/main</span><br></pre></td></tr></table></figure>

<p>然后点击确定即可，若配置的信息正确，在屏幕右下角会弹出设置成功的通知。</p>
<p><strong>PicGo设置</strong></p>
<ul>
<li><p>勾选 上传前重命名，每次上传时会弹出窗口让你自定义图片名。默认是以时间作为图片名。</p>
</li>
<li><p>勾选 上传后自动赋值URL，这样上传完就可以直接去md文章中粘贴就可以插入图片了。</p>
</li>
</ul>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/PicGo%E8%AE%BE%E7%BD%AE.png" alt="PicGo设置"></p>
<h2 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a><strong>上传图片</strong></h2><p>用PicGo上传图片到指定的GitHub图床仓库。或其他图床仓库。</p>
<p>上传成功后，右下角会弹出 <strong>上传成功</strong> 的提示</p>
<p>点击左边的相册，也会看到上传的图片，当然去 GitHub 仓库也能看到。点击复制，就能复制图片的 markdown 链接，完成👍</p>
<h2 id="文章插入图片"><a href="#文章插入图片" class="headerlink" title="文章插入图片"></a><strong>文章插入图片</strong></h2><p>用Typora编辑博客文章（MarkDown文件）</p>
<h2 id="设置Typora"><a href="#设置Typora" class="headerlink" title="设置Typora"></a>设置Typora</h2><p><strong>在Typora设置中关闭插入图片时自动复制或上传的功能</strong></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95%E2%80%94Typora%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE.png"></p>
<h2 id="修改hexo配置文件-config"><a href="#修改hexo配置文件-config" class="headerlink" title="修改hexo配置文件_config"></a>修改hexo配置文件_config</h2><p><strong>修改Hexo根目录—blog文件夹中的_config配置文件，关闭自动生成文章同名文件夹功能</strong></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95%E2%80%94blog_config%E9%85%8D%E7%BD%AE%E4%BF%AE%E6%94%B9.png"></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95%E2%80%94%E5%9C%B0%E5%9D%80%E6%A0%BC%E5%BC%8F.png" alt="上一张图片地址"></p>
<p>成功啦！</p>
<p>从本地和远程端口访问效果如图：</p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E5%BA%8A%E6%B5%8B%E8%AF%95%E2%80%94%E8%BF%9C%E7%AB%AF%E8%AE%BF%E9%97%AE%E6%88%90%E5%8A%9F.png" alt="成功显示出来了！"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>利用PicGo和GitHub管理图片，将博客用到的图片存放于云端，而不占用自己的电脑内存空间。</p>
<ul>
<li><p>下载安装PicGo</p>
</li>
<li><p>创建GitHub图片仓库</p>
</li>
<li><p>配置GitHub</p>
</li>
<li><p>设置PicGo</p>
</li>
<li><p>给文章插入图片</p>
</li>
<li><p>设置Typora</p>
</li>
<li><p>修改hexo配置文件_config</p>
</li>
</ul>
<p>最后说一句， GitHub 图床虽然免费，但是上传有些慢，也可能因为网络的原因上传失败，需要多试几次~</p>
<h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a><strong>优点：</strong></h2><ol>
<li><p>降低本地内存开销。通过图床仓库来管理的话图片就都保存在了GitHub云端上，可以节省本地空间了。在使用图床之前，我只发了几篇文章就占用了近100M的内存</p>
</li>
<li><p>简便很多。发博客很多都是用的截图，再也不用把截图保存到本地再插入到文章里了。</p>
</li>
</ol>
<h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a><strong>缺点：</strong></h2><ol>
<li>图床仓库是公开的，上传图片要注意保护个人隐私。</li>
</ol>
<h2 id="上传图片失败解决方法"><a href="#上传图片失败解决方法" class="headerlink" title="上传图片失败解决方法"></a>上传图片失败解决方法</h2><p>目前知道的GitHub图床问题有：</p>
<ol>
<li>Token未更新</li>
<li>仓库名称带空格，配置时需要变为-</li>
<li>无法上传PNG</li>
<li>图片名称不能带+</li>
<li>仓库中已存在相同名称的图片，有时候上传了图片显示不出来，然后就习惯性把相册里的图删除，但其实在GitHub仓库里的文件并没有删除，所以再次上传时就会失败，原因是命名冲突<ul>
<li>解决方法在PicGo设置中勾选  时间戳重命名</li>
<li>或者web进入GitHub图床仓库，然后删除重复命名的图片文件</li>
</ul>
</li>
</ol>
<p>参考文献：</p>
<p><a href="https://www.jianshu.com/p/9d91355e8418">图床工具的使用—PicGo - 简书 (jianshu.com)</a></p>
<p><a href="https://blog.csdn.net/weixin_38673554/article/details/106444215">(22条消息) GitHub + PicGo 搭建自己的图床_CatOneTwo的专栏-CSDN博客</a></p>
]]></content>
      <tags>
        <tag>test</tag>
        <tag>PicGo</tag>
        <tag>图床</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/03/02/Hello%20World/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo + GitHub Page搭建个人博客图片显示问题解决方案（亲测有效）</title>
    <url>/2022/03/03/Hexo%20+%20GitHub%20Page%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%EF%BC%88%E4%BA%B2%E6%B5%8B%E6%9C%89%E6%95%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>按照教程搭载好博客，并且部署到远端，全文本格式的md都使用正常。但是带图片的博客却无法正常显示图片。</p>
<span id="more"></span>

<h1 id="解决方法1"><a href="#解决方法1" class="headerlink" title="解决方法1"></a>解决方法1</h1><p>参考官方文档：<a href="https://hexo.io/zh-cn/docs/asset-folders.html">资源文件夹 | Hexo</a></p>
<p><img src="https://raw.githubusercontent.com/SweerYeHe/PicBed_PicGo/main/img/%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BAHexo%E5%AE%98%E6%96%B9%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png"></p>
<p>按照图片最下面修改了hexo根目录下的_config.yml文件夹就成功了。</p>
<p><code>post_asset_folder: true</code><br><code>marked:</code><br><code>  prependRoot: true</code>s<br><code>  postAsset: true</code></p>
<p>图片插入格式<code>![](image.png)</code></p>
<h1 id="解决方法2"><a href="#解决方法2" class="headerlink" title="解决方法2"></a>解决方法2</h1><p>在Hexo的目录source中创建一个图片文件夹，例如pic</p>
<p>把你要插入的图片文件放到该目录下面，在你的文章中正常使用markdown的语法插入图片即可</p>
<p>例如<code>![img](/pic/xxx.png)</code></p>
<p>到此你就完成了插图，并且图片在你的博客上面也会正常显示！</p>
<p>记住在pic前面有一个&#x2F;，表示根目录的意思，因为对于hexo来说它的资源文件的根目录就是source,当然你也可以修改_config.yml改变这个配置</p>
<p>原文链接：<a href="https://blog.csdn.net/as3522/article/details/102972473">https://blog.csdn.net/as3522/article/details/102972473</a></p>
<h1 id="解决方法3"><a href="#解决方法3" class="headerlink" title="解决方法3"></a>解决方法3</h1><p>把图片全部保存到云端，推荐使用GitHub+PicGo图床，参见文章   <strong>PicGo图床功能测试</strong></p>
<p><a href="https://sweeryehe.github.io/2022/03/05/PicGo%E5%9B%BE%E5%BA%8A%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/">PicGo图床功能测试 | SweerYeHe</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>github</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>C-数据类型</title>
    <url>/2022/03/06/C-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><p><strong>原码：</strong>原码表示法在数值前面前面有一位符号位（即最高位为符号位），<a href="http://baike.baidu.com/view/71505.htm">正数</a>该位为0，负数该位为1（0有两种表示：+0和-0），其余位表示数值的大小。</p>
<p><strong>反码：</strong>正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外</p>
<p><strong>补码：</strong>计算机用反码计算时存在-0问题，所以诞生了补码</p>
<p><strong>补码计算</strong>：正数和+0的补码是其原码；负数则先计算其反码，然后反码加上1，得到补码；补码减掉1，得到反码，再将反码取反，得到原码。</p>
<span id="more"></span>

<p>8位二进制取值范围是(-2^7)～(２^7-1)，即-128～127。</p>
<p>由于补码&#x3D;10000000具有特殊性，计算机在编写底层算法时，将其规定为该取值范围中的最小数-128，其值与(-1)+(-127)的计算结果正好符合。</p>
<p>8位二进制补码1000 0000没有对应的反码和原码，其他位数的二进制补码与此类似。</p>
<ol>
<li><strong>字符和整形变量</strong></li>
</ol>
<p>数据类型的本质就是为了合理利用内存空间</p>
<p>字节：1B&#x3D;&#x3D;8位b（二进制）</p>
<p>1b只能存放0或1</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">	test01();</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test01</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof (ch)=%d\n&quot;</span>, <span class="keyword">sizeof</span>(ch));<span class="comment">//1字节</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof(num)=d%\n&quot;</span>, <span class="keyword">sizeof</span>(num));<span class="comment">//4字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ol start="2">
<li><strong>指针变量</strong></li>
</ol>
<p>硬盘——内存——CPU</p>
<p>内存是CPU和硬盘的桥梁</p>
<p>内存地址：内存编号，内存中每一个字节分配一个号码，就是内存编号</p>
<p>指针变量：存放上面的号码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test02</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line">	<span class="comment">//取变量地址   用&amp;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;num);<span class="comment">//num变量空间4字节，取到的是变量num的起始地址，第一字节地址</span></span><br><span class="line">	<span class="comment">//需求   定义一个指针变量保存num的地址</span></span><br><span class="line">	<span class="type">int</span> *p=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//定义时：*说明p是指针变量   int *整体定义p是一个整数指针类型！</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;sizeof(p)=%d\n&quot;</span>, <span class="keyword">sizeof</span>(p));</span><br><span class="line">	p = &amp;num;<span class="comment">//p指向了num变量空间的首地址，于是通过p可以找到num变量</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p=%d\n&quot;</span>, *p);</span><br><span class="line">	<span class="comment">//使用中：*表示取p变量指向的地址空间的内容（间接地取到变量num的值）</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00AFFCE4</span><br><span class="line">sizeof(p)=4</span><br><span class="line">*p=100</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>

<hr>
<p>test03</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test03</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="comment">//指针变量的两种类型：自身类型   指向类型</span></span><br><span class="line">	<span class="comment">//自身类型：在指针变量定义的时候，除去变量名剩下的就是该指针变量的的类型</span></span><br><span class="line">		<span class="comment">//指针变量p自身类型就是int *</span></span><br><span class="line">	<span class="comment">//指向类型：在指针变量定义时，除去*p剩下的就是该指针变量合法的指向类型</span></span><br><span class="line">		<span class="comment">//指针变量p的指向类型就是int，所以只能合法地指向int类型的变量</span></span><br><span class="line">	<span class="comment">//指向类型决定了   指针变量所取空间内容的宽度 决定了指针变量+1跳过的</span></span><br><span class="line">	p = &amp;num;</span><br><span class="line">	<span class="comment">//指针变量的跨度</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;&amp;num=%u\n&quot;</span>, &amp;num);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p=%u\n&quot;</span>, p);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p+1=%u\n&quot;</span>, p + <span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p=%d\n&quot;</span>, *p);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> *p1 = &amp;num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p1=%u\n&quot;</span>, p1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;p1+1=%u\n&quot;</span>, p1 + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;num=16448116</span><br><span class="line">p=16448116</span><br><span class="line">p+1=16448120</span><br><span class="line">*p=10</span><br><span class="line">p1=16448116</span><br><span class="line">p1+1=16448117</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>

<hr>
<p>testmy01</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">testmy01() </span><br><span class="line">&#123;</span><br><span class="line">	int num = 1021;</span><br><span class="line">	int *p = NULL;</span><br><span class="line">	p = &amp;num;</span><br><span class="line">	printf(&quot;&amp;num=%u\n&quot;, &amp;num);</span><br><span class="line">	printf(&quot;p=%u\n&quot;, p);</span><br><span class="line">	printf(&quot;*p=%d\n&quot;, *p);</span><br><span class="line"></span><br><span class="line">	char *p1 = &amp;num;//p1步长是一个字节</span><br><span class="line"></span><br><span class="line">	printf(&quot;p1=%u\n&quot;, p1);</span><br><span class="line">	printf(&quot;*p1=%d\n&quot;, *p1);</span><br><span class="line"></span><br><span class="line">	p1 += 1;</span><br><span class="line">	printf(&quot;p1=%u\n&quot;, p1);</span><br><span class="line">	printf(&quot;*p1=%d\n&quot;, *p1);</span><br><span class="line"></span><br><span class="line">	p1 += 1;</span><br><span class="line">	printf(&quot;p1=%u\n&quot;, p1);</span><br><span class="line">	printf(&quot;*p1=%d\n&quot;, *p1);</span><br><span class="line"></span><br><span class="line">	p1 += 1;</span><br><span class="line">	printf(&quot;p1=%u\n&quot;, p1);</span><br><span class="line">	printf(&quot;*p1=%d\n&quot;, *p1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;num=5503868</span><br><span class="line">p=5503868</span><br><span class="line">*p=1021</span><br><span class="line">p1=5503868</span><br><span class="line">*p1=-3</span><br><span class="line">p1=5503869</span><br><span class="line">*p1=3</span><br><span class="line">p1=5503870</span><br><span class="line">*p1=0</span><br><span class="line">p1=5503871</span><br><span class="line">*p1=0</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>

<p><strong>我不李姐</strong></p>
<hr>
<p>test04</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test04</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> num = <span class="number">0x12020304</span>;<span class="comment">//赋值十六进制</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> *p1 = &amp;num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p1=%#x\n&quot;</span>, *p1);<span class="comment">//输出十六进制</span></span><br><span class="line"></span><br><span class="line">	<span class="type">short</span> *p2 = &amp;num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p2=%#x\n&quot;</span>, *p2);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> *p3 = &amp;num;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p3=%#x\n&quot;</span>, *p3);</span><br><span class="line"></span><br><span class="line">	<span class="type">short</span> *p4 = &amp;num;</span><br><span class="line">	p4 += <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;*p4=%#x\n&quot;</span>, *p4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>编译结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*p1=0x12020304</span><br><span class="line">*p2=0x304</span><br><span class="line">*p3=0x4</span><br><span class="line">*p4=0x1202</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
</search>
